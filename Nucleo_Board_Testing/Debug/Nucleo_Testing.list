
Nucleo_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041fc  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004338  08004338  00005338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004430  08004430  00005430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004438  08004438  00005438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800443c  0800443c  0000543c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000028  20000008  08004440  00006008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000118  20000030  08004468  00006030  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000148  08004468  00006148  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00006030  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012767  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002578  00000000  00000000  000187c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b0  00000000  00000000  0001ad40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fdf  00000000  00000000  0001c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021ddf  00000000  00000000  0001d1cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013283  00000000  00000000  0003efae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d945e  00000000  00000000  00052231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0012b68f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005718  00000000  00000000  0012b6d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006f  00000000  00000000  00130dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000030 	.word	0x20000030
 8000158:	00000000 	.word	0x00000000
 800015c:	08004320 	.word	0x08004320

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000034 	.word	0x20000034
 8000178:	08004320 	.word	0x08004320

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96a 	b.w	8000468 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	460c      	mov	r4, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14e      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001b8:	4694      	mov	ip, r2
 80001ba:	458c      	cmp	ip, r1
 80001bc:	4686      	mov	lr, r0
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	d962      	bls.n	800028a <__udivmoddi4+0xde>
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0320 	rsb	r3, r2, #32
 80001ca:	4091      	lsls	r1, r2
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	4319      	orrs	r1, r3
 80001d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001de:	fa1f f68c 	uxth.w	r6, ip
 80001e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ea:	fb07 1114 	mls	r1, r7, r4, r1
 80001ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f2:	fb04 f106 	mul.w	r1, r4, r6
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000202:	f080 8112 	bcs.w	800042a <__udivmoddi4+0x27e>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 810f 	bls.w	800042a <__udivmoddi4+0x27e>
 800020c:	3c02      	subs	r4, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a59      	subs	r1, r3, r1
 8000212:	fa1f f38e 	uxth.w	r3, lr
 8000216:	fbb1 f0f7 	udiv	r0, r1, r7
 800021a:	fb07 1110 	mls	r1, r7, r0, r1
 800021e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000222:	fb00 f606 	mul.w	r6, r0, r6
 8000226:	429e      	cmp	r6, r3
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0303 	adds.w	r3, ip, r3
 800022e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000232:	f080 80fc 	bcs.w	800042e <__udivmoddi4+0x282>
 8000236:	429e      	cmp	r6, r3
 8000238:	f240 80f9 	bls.w	800042e <__udivmoddi4+0x282>
 800023c:	4463      	add	r3, ip
 800023e:	3802      	subs	r0, #2
 8000240:	1b9b      	subs	r3, r3, r6
 8000242:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000246:	2100      	movs	r1, #0
 8000248:	b11d      	cbz	r5, 8000252 <__udivmoddi4+0xa6>
 800024a:	40d3      	lsrs	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	e9c5 3200 	strd	r3, r2, [r5]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d905      	bls.n	8000266 <__udivmoddi4+0xba>
 800025a:	b10d      	cbz	r5, 8000260 <__udivmoddi4+0xb4>
 800025c:	e9c5 0100 	strd	r0, r1, [r5]
 8000260:	2100      	movs	r1, #0
 8000262:	4608      	mov	r0, r1
 8000264:	e7f5      	b.n	8000252 <__udivmoddi4+0xa6>
 8000266:	fab3 f183 	clz	r1, r3
 800026a:	2900      	cmp	r1, #0
 800026c:	d146      	bne.n	80002fc <__udivmoddi4+0x150>
 800026e:	42a3      	cmp	r3, r4
 8000270:	d302      	bcc.n	8000278 <__udivmoddi4+0xcc>
 8000272:	4290      	cmp	r0, r2
 8000274:	f0c0 80f0 	bcc.w	8000458 <__udivmoddi4+0x2ac>
 8000278:	1a86      	subs	r6, r0, r2
 800027a:	eb64 0303 	sbc.w	r3, r4, r3
 800027e:	2001      	movs	r0, #1
 8000280:	2d00      	cmp	r5, #0
 8000282:	d0e6      	beq.n	8000252 <__udivmoddi4+0xa6>
 8000284:	e9c5 6300 	strd	r6, r3, [r5]
 8000288:	e7e3      	b.n	8000252 <__udivmoddi4+0xa6>
 800028a:	2a00      	cmp	r2, #0
 800028c:	f040 8090 	bne.w	80003b0 <__udivmoddi4+0x204>
 8000290:	eba1 040c 	sub.w	r4, r1, ip
 8000294:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000298:	fa1f f78c 	uxth.w	r7, ip
 800029c:	2101      	movs	r1, #1
 800029e:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb08 4416 	mls	r4, r8, r6, r4
 80002aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ae:	fb07 f006 	mul.w	r0, r7, r6
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x11c>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x11a>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f200 80cd 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 80002c6:	4626      	mov	r6, r4
 80002c8:	1a1c      	subs	r4, r3, r0
 80002ca:	fa1f f38e 	uxth.w	r3, lr
 80002ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80002d2:	fb08 4410 	mls	r4, r8, r0, r4
 80002d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002da:	fb00 f707 	mul.w	r7, r0, r7
 80002de:	429f      	cmp	r7, r3
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0x148>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x146>
 80002ec:	429f      	cmp	r7, r3
 80002ee:	f200 80b0 	bhi.w	8000452 <__udivmoddi4+0x2a6>
 80002f2:	4620      	mov	r0, r4
 80002f4:	1bdb      	subs	r3, r3, r7
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	e7a5      	b.n	8000248 <__udivmoddi4+0x9c>
 80002fc:	f1c1 0620 	rsb	r6, r1, #32
 8000300:	408b      	lsls	r3, r1
 8000302:	fa22 f706 	lsr.w	r7, r2, r6
 8000306:	431f      	orrs	r7, r3
 8000308:	fa20 fc06 	lsr.w	ip, r0, r6
 800030c:	fa04 f301 	lsl.w	r3, r4, r1
 8000310:	ea43 030c 	orr.w	r3, r3, ip
 8000314:	40f4      	lsrs	r4, r6
 8000316:	fa00 f801 	lsl.w	r8, r0, r1
 800031a:	0c38      	lsrs	r0, r7, #16
 800031c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000320:	fbb4 fef0 	udiv	lr, r4, r0
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fb00 441e 	mls	r4, r0, lr, r4
 800032c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000330:	fb0e f90c 	mul.w	r9, lr, ip
 8000334:	45a1      	cmp	r9, r4
 8000336:	fa02 f201 	lsl.w	r2, r2, r1
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x1a6>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000342:	f080 8084 	bcs.w	800044e <__udivmoddi4+0x2a2>
 8000346:	45a1      	cmp	r9, r4
 8000348:	f240 8081 	bls.w	800044e <__udivmoddi4+0x2a2>
 800034c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000350:	443c      	add	r4, r7
 8000352:	eba4 0409 	sub.w	r4, r4, r9
 8000356:	fa1f f983 	uxth.w	r9, r3
 800035a:	fbb4 f3f0 	udiv	r3, r4, r0
 800035e:	fb00 4413 	mls	r4, r0, r3, r4
 8000362:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000366:	fb03 fc0c 	mul.w	ip, r3, ip
 800036a:	45a4      	cmp	ip, r4
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x1d2>
 800036e:	193c      	adds	r4, r7, r4
 8000370:	f103 30ff 	add.w	r0, r3, #4294967295
 8000374:	d267      	bcs.n	8000446 <__udivmoddi4+0x29a>
 8000376:	45a4      	cmp	ip, r4
 8000378:	d965      	bls.n	8000446 <__udivmoddi4+0x29a>
 800037a:	3b02      	subs	r3, #2
 800037c:	443c      	add	r4, r7
 800037e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000382:	fba0 9302 	umull	r9, r3, r0, r2
 8000386:	eba4 040c 	sub.w	r4, r4, ip
 800038a:	429c      	cmp	r4, r3
 800038c:	46ce      	mov	lr, r9
 800038e:	469c      	mov	ip, r3
 8000390:	d351      	bcc.n	8000436 <__udivmoddi4+0x28a>
 8000392:	d04e      	beq.n	8000432 <__udivmoddi4+0x286>
 8000394:	b155      	cbz	r5, 80003ac <__udivmoddi4+0x200>
 8000396:	ebb8 030e 	subs.w	r3, r8, lr
 800039a:	eb64 040c 	sbc.w	r4, r4, ip
 800039e:	fa04 f606 	lsl.w	r6, r4, r6
 80003a2:	40cb      	lsrs	r3, r1
 80003a4:	431e      	orrs	r6, r3
 80003a6:	40cc      	lsrs	r4, r1
 80003a8:	e9c5 6400 	strd	r6, r4, [r5]
 80003ac:	2100      	movs	r1, #0
 80003ae:	e750      	b.n	8000252 <__udivmoddi4+0xa6>
 80003b0:	f1c2 0320 	rsb	r3, r2, #32
 80003b4:	fa20 f103 	lsr.w	r1, r0, r3
 80003b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003bc:	fa24 f303 	lsr.w	r3, r4, r3
 80003c0:	4094      	lsls	r4, r2
 80003c2:	430c      	orrs	r4, r1
 80003c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c8:	fa00 fe02 	lsl.w	lr, r0, r2
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3110 	mls	r1, r8, r0, r3
 80003d8:	0c23      	lsrs	r3, r4, #16
 80003da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003de:	fb00 f107 	mul.w	r1, r0, r7
 80003e2:	4299      	cmp	r1, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x24c>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ee:	d22c      	bcs.n	800044a <__udivmoddi4+0x29e>
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d92a      	bls.n	800044a <__udivmoddi4+0x29e>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4463      	add	r3, ip
 80003f8:	1a5b      	subs	r3, r3, r1
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000400:	fb08 3311 	mls	r3, r8, r1, r3
 8000404:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000408:	fb01 f307 	mul.w	r3, r1, r7
 800040c:	42a3      	cmp	r3, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x276>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f101 36ff 	add.w	r6, r1, #4294967295
 8000418:	d213      	bcs.n	8000442 <__udivmoddi4+0x296>
 800041a:	42a3      	cmp	r3, r4
 800041c:	d911      	bls.n	8000442 <__udivmoddi4+0x296>
 800041e:	3902      	subs	r1, #2
 8000420:	4464      	add	r4, ip
 8000422:	1ae4      	subs	r4, r4, r3
 8000424:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000428:	e739      	b.n	800029e <__udivmoddi4+0xf2>
 800042a:	4604      	mov	r4, r0
 800042c:	e6f0      	b.n	8000210 <__udivmoddi4+0x64>
 800042e:	4608      	mov	r0, r1
 8000430:	e706      	b.n	8000240 <__udivmoddi4+0x94>
 8000432:	45c8      	cmp	r8, r9
 8000434:	d2ae      	bcs.n	8000394 <__udivmoddi4+0x1e8>
 8000436:	ebb9 0e02 	subs.w	lr, r9, r2
 800043a:	eb63 0c07 	sbc.w	ip, r3, r7
 800043e:	3801      	subs	r0, #1
 8000440:	e7a8      	b.n	8000394 <__udivmoddi4+0x1e8>
 8000442:	4631      	mov	r1, r6
 8000444:	e7ed      	b.n	8000422 <__udivmoddi4+0x276>
 8000446:	4603      	mov	r3, r0
 8000448:	e799      	b.n	800037e <__udivmoddi4+0x1d2>
 800044a:	4630      	mov	r0, r6
 800044c:	e7d4      	b.n	80003f8 <__udivmoddi4+0x24c>
 800044e:	46d6      	mov	lr, sl
 8000450:	e77f      	b.n	8000352 <__udivmoddi4+0x1a6>
 8000452:	4463      	add	r3, ip
 8000454:	3802      	subs	r0, #2
 8000456:	e74d      	b.n	80002f4 <__udivmoddi4+0x148>
 8000458:	4606      	mov	r6, r0
 800045a:	4623      	mov	r3, r4
 800045c:	4608      	mov	r0, r1
 800045e:	e70f      	b.n	8000280 <__udivmoddi4+0xd4>
 8000460:	3e02      	subs	r6, #2
 8000462:	4463      	add	r3, ip
 8000464:	e730      	b.n	80002c8 <__udivmoddi4+0x11c>
 8000466:	bf00      	nop

08000468 <__aeabi_idiv0>:
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop

0800046c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000478:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800047a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4313      	orrs	r3, r2
 8000482:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000488:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4013      	ands	r3, r2
 800048e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000490:	68fb      	ldr	r3, [r7, #12]
}
 8000492:	bf00      	nop
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
	...

080004a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a6:	f000 fc61 	bl	8000d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004aa:	f000 f84f 	bl	800054c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004ae:	f000 f8a5 	bl	80005fc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b2:	f000 f901 	bl	80006b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004b6:	f000 f8bf 	bl	8000638 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80004ba:	2000      	movs	r0, #0
 80004bc:	f000 fae6 	bl	8000a8c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f000 fae3 	bl	8000a8c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80004c6:	2002      	movs	r0, #2
 80004c8:	f000 fae0 	bl	8000a8c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80004cc:	2101      	movs	r1, #1
 80004ce:	2000      	movs	r0, #0
 80004d0:	f000 fb4a 	bl	8000b68 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80004d4:	2101      	movs	r1, #1
 80004d6:	2001      	movs	r0, #1
 80004d8:	f000 fb46 	bl	8000b68 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80004dc:	2101      	movs	r1, #1
 80004de:	2002      	movs	r0, #2
 80004e0:	f000 fb42 	bl	8000b68 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80004e4:	4b18      	ldr	r3, [pc, #96]	@ (8000548 <main+0xa8>)
 80004e6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004ea:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80004ec:	4b16      	ldr	r3, [pc, #88]	@ (8000548 <main+0xa8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80004f2:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <main+0xa8>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80004f8:	4b13      	ldr	r3, [pc, #76]	@ (8000548 <main+0xa8>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80004fe:	4b12      	ldr	r3, [pc, #72]	@ (8000548 <main+0xa8>)
 8000500:	2200      	movs	r2, #0
 8000502:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000504:	4910      	ldr	r1, [pc, #64]	@ (8000548 <main+0xa8>)
 8000506:	2000      	movs	r0, #0
 8000508:	f000 fb9e 	bl	8000c48 <BSP_COM_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <main+0x76>
  {
    Error_Handler();
 8000512:	f000 f931 	bl	8000778 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		float tempC = LM75_ReadTemperatureC();
 8000516:	f000 f8f7 	bl	8000708 <LM75_ReadTemperatureC>
 800051a:	ed87 0a01 	vstr	s0, [r7, #4]

		// toggle an LED if above some threshold
		if (tempC > 10.0f) {
 800051e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000522:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800052a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800052e:	dd03      	ble.n	8000538 <main+0x98>
			BSP_LED_On(LED_BLUE);
 8000530:	2000      	movs	r0, #0
 8000532:	f000 fae5 	bl	8000b00 <BSP_LED_On>
 8000536:	e002      	b.n	800053e <main+0x9e>
		} else {
			BSP_LED_Off(LED_BLUE);
 8000538:	2000      	movs	r0, #0
 800053a:	f000 fafb 	bl	8000b34 <BSP_LED_Off>
		}

		 HAL_Delay(500);
 800053e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000542:	f000 fc99 	bl	8000e78 <HAL_Delay>
	while (1) {
 8000546:	e7e6      	b.n	8000516 <main+0x76>
 8000548:	2000004c 	.word	0x2000004c

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b09a      	sub	sp, #104	@ 0x68
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0320 	add.w	r3, r7, #32
 8000556:	2248      	movs	r2, #72	@ 0x48
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f003 feb3 	bl	80042c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]
 800056e:	615a      	str	r2, [r3, #20]
 8000570:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000572:	4b21      	ldr	r3, [pc, #132]	@ (80005f8 <SystemClock_Config+0xac>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800057a:	4a1f      	ldr	r2, [pc, #124]	@ (80005f8 <SystemClock_Config+0xac>)
 800057c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000580:	6013      	str	r3, [r2, #0]
 8000582:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <SystemClock_Config+0xac>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800058e:	2322      	movs	r3, #34	@ 0x22
 8000590:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000592:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	2340      	movs	r3, #64	@ 0x40
 800059e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005a0:	2300      	movs	r3, #0
 80005a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80005a4:	23a0      	movs	r3, #160	@ 0xa0
 80005a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 ff8f 	bl	80024d4 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005bc:	f000 f8dc 	bl	8000778 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80005c0:	236f      	movs	r3, #111	@ 0x6f
 80005c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2101      	movs	r1, #1
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 faeb 	bl	8002bbc <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005ec:	f000 f8c4 	bl	8000778 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3768      	adds	r7, #104	@ 0x68
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	58000400 	.word	0x58000400

080005fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	@ 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2250      	movs	r2, #80	@ 0x50
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f003 fe5c 	bl	80042c6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800060e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000612:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000614:	2300      	movs	r3, #0
 8000616:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000618:	2300      	movs	r3, #0
 800061a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4618      	mov	r0, r3
 8000620:	f002 ff09 	bl	8003436 <HAL_RCCEx_PeriphCLKConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800062a:	f000 f8a5 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800062e:	bf00      	nop
 8000630:	3750      	adds	r7, #80	@ 0x50
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800063c:	4b1b      	ldr	r3, [pc, #108]	@ (80006ac <MX_I2C1_Init+0x74>)
 800063e:	4a1c      	ldr	r2, [pc, #112]	@ (80006b0 <MX_I2C1_Init+0x78>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8000642:	4b1a      	ldr	r3, [pc, #104]	@ (80006ac <MX_I2C1_Init+0x74>)
 8000644:	4a1b      	ldr	r2, [pc, #108]	@ (80006b4 <MX_I2C1_Init+0x7c>)
 8000646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000648:	4b18      	ldr	r3, [pc, #96]	@ (80006ac <MX_I2C1_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064e:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <MX_I2C1_Init+0x74>)
 8000650:	2201      	movs	r2, #1
 8000652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000654:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <MX_I2C1_Init+0x74>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800065a:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <MX_I2C1_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000666:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <MX_I2C1_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <MX_I2C1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000672:	480e      	ldr	r0, [pc, #56]	@ (80006ac <MX_I2C1_Init+0x74>)
 8000674:	f000 fedf 	bl	8001436 <HAL_I2C_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800067e:	f000 f87b 	bl	8000778 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000682:	2100      	movs	r1, #0
 8000684:	4809      	ldr	r0, [pc, #36]	@ (80006ac <MX_I2C1_Init+0x74>)
 8000686:	f001 faf9 	bl	8001c7c <HAL_I2CEx_ConfigAnalogFilter>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000690:	f000 f872 	bl	8000778 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000694:	2100      	movs	r1, #0
 8000696:	4805      	ldr	r0, [pc, #20]	@ (80006ac <MX_I2C1_Init+0x74>)
 8000698:	f001 fb3b 	bl	8001d12 <HAL_I2CEx_ConfigDigitalFilter>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006a2:	f000 f869 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2000005c 	.word	0x2000005c
 80006b0:	40005400 	.word	0x40005400
 80006b4:	00b07cb4 	.word	0x00b07cb4

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006cc:	2004      	movs	r0, #4
 80006ce:	f7ff fecd 	bl	800046c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2002      	movs	r0, #2
 80006d4:	f7ff feca 	bl	800046c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff fec7 	bl	800046c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80006de:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	2302      	movs	r3, #2
 80006e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80006f0:	230a      	movs	r3, #10
 80006f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4619      	mov	r1, r3
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006fc:	f000 fcf0 	bl	80010e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000700:	bf00      	nop
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <LM75_ReadTemperatureC>:

/* USER CODE BEGIN 4 */
float LM75_ReadTemperatureC(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af04      	add	r7, sp, #16
    uint8_t tempBytes[2];
    if (HAL_I2C_Mem_Read(&hi2c1,
 800070e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000712:	9302      	str	r3, [sp, #8]
 8000714:	2302      	movs	r3, #2
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2301      	movs	r3, #1
 800071e:	2200      	movs	r2, #0
 8000720:	2190      	movs	r1, #144	@ 0x90
 8000722:	4813      	ldr	r0, [pc, #76]	@ (8000770 <LM75_ReadTemperatureC+0x68>)
 8000724:	f000 ff22 	bl	800156c <HAL_I2C_Mem_Read>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <LM75_ReadTemperatureC+0x2a>
                         tempBytes,
                         2,
                         1000) != HAL_OK)
    {
        // Handle error, e.g. return something safe:
        return -300.0f;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <LM75_ReadTemperatureC+0x6c>)
 8000730:	e017      	b.n	8000762 <LM75_ReadTemperatureC+0x5a>
    }

    int16_t raw = (tempBytes[0] << 8) | (tempBytes[1]);
 8000732:	793b      	ldrb	r3, [r7, #4]
 8000734:	021b      	lsls	r3, r3, #8
 8000736:	b21a      	sxth	r2, r3
 8000738:	797b      	ldrb	r3, [r7, #5]
 800073a:	b21b      	sxth	r3, r3
 800073c:	4313      	orrs	r3, r2
 800073e:	81fb      	strh	r3, [r7, #14]
    raw >>= 7;  // sign-extends automatically in C if 'raw' is int16_t
 8000740:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000744:	11db      	asrs	r3, r3, #7
 8000746:	81fb      	strh	r3, [r7, #14]

    // Each LSB = 0.5 °C
    float temperatureC = (float)raw * 0.5f;
 8000748:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800074c:	ee07 3a90 	vmov	s15, r3
 8000750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000754:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800075c:	edc7 7a02 	vstr	s15, [r7, #8]
    return temperatureC;
 8000760:	68bb      	ldr	r3, [r7, #8]
}
 8000762:	ee07 3a90 	vmov	s15, r3
 8000766:	eeb0 0a67 	vmov.f32	s0, s15
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2000005c 	.word	0x2000005c
 8000774:	c3960000 	.word	0xc3960000

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <Error_Handler+0x8>

08000784 <LL_AHB2_GRP1_EnableClock>:
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800078c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000790:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000792:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4313      	orrs	r3, r2
 800079a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800079c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4013      	ands	r3, r2
 80007a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007a8:	68fb      	ldr	r3, [r7, #12]
}
 80007aa:	bf00      	nop
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b085      	sub	sp, #20
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80007be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80007c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80007ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007d2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4013      	ands	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007da:	68fb      	ldr	r3, [r7, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b09c      	sub	sp, #112	@ 0x70
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2250      	movs	r2, #80	@ 0x50
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f003 fd54 	bl	80042c6 <memset>
  if(hi2c->Instance==I2C1)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a17      	ldr	r2, [pc, #92]	@ (8000880 <HAL_I2C_MspInit+0x88>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d126      	bne.n	8000876 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000828:	2304      	movs	r3, #4
 800082a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800082c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000830:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fdfd 	bl	8003436 <HAL_RCCEx_PeriphCLKConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000842:	f7ff ff99 	bl	8000778 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2002      	movs	r0, #2
 8000848:	f7ff ff9c 	bl	8000784 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800084c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000850:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000852:	2312      	movs	r3, #18
 8000854:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800085e:	2304      	movs	r3, #4
 8000860:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000866:	4619      	mov	r1, r3
 8000868:	4806      	ldr	r0, [pc, #24]	@ (8000884 <HAL_I2C_MspInit+0x8c>)
 800086a:	f000 fc39 	bl	80010e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800086e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000872:	f7ff ffa0 	bl	80007b6 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000876:	bf00      	nop
 8000878:	3770      	adds	r7, #112	@ 0x70
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40005400 	.word	0x40005400
 8000884:	48000400 	.word	0x48000400

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <NMI_Handler+0x4>

08000890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <HardFault_Handler+0x4>

08000898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <MemManage_Handler+0x4>

080008a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <UsageFault_Handler+0x4>

080008b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008de:	f000 fa9f 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f000 fd80 	bl	80013f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 80008f8:	2002      	movs	r0, #2
 80008fa:	f000 fd79 	bl	80013f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}

08000902 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8000906:	2010      	movs	r0, #16
 8000908:	f000 fd72 	bl	80013f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000914:	4b24      	ldr	r3, [pc, #144]	@ (80009a8 <SystemInit+0x98>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800091a:	4a23      	ldr	r2, [pc, #140]	@ (80009a8 <SystemInit+0x98>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000938:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800093c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800093e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000948:	4b18      	ldr	r3, [pc, #96]	@ (80009ac <SystemInit+0x9c>)
 800094a:	4013      	ands	r3, r2
 800094c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800094e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000952:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000956:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800095a:	f023 0305 	bic.w	r3, r3, #5
 800095e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000966:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800096a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800096e:	f023 0301 	bic.w	r3, r3, #1
 8000972:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800097a:	4a0d      	ldr	r2, [pc, #52]	@ (80009b0 <SystemInit+0xa0>)
 800097c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800097e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000982:	4a0b      	ldr	r2, [pc, #44]	@ (80009b0 <SystemInit+0xa0>)
 8000984:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000990:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000994:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00
 80009ac:	faf6fefb 	.word	0xfaf6fefb
 80009b0:	22041000 	.word	0x22041000

080009b4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80009b4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b8:	3304      	adds	r3, #4

080009ba <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ba:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009bc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80009be:	d3f9      	bcc.n	80009b4 <CopyDataInit>
  bx lr
 80009c0:	4770      	bx	lr

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80009c2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80009c4:	3004      	adds	r0, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80009c6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>
  bx lr
 80009ca:	4770      	bx	lr

080009cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009cc:	480c      	ldr	r0, [pc, #48]	@ (8000a00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009d0:	f7ff ff9e 	bl	8000910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80009d4:	480b      	ldr	r0, [pc, #44]	@ (8000a04 <LoopForever+0x6>)
 80009d6:	490c      	ldr	r1, [pc, #48]	@ (8000a08 <LoopForever+0xa>)
 80009d8:	4a0c      	ldr	r2, [pc, #48]	@ (8000a0c <LoopForever+0xe>)
 80009da:	2300      	movs	r3, #0
 80009dc:	f7ff ffed 	bl	80009ba <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80009e0:	480b      	ldr	r0, [pc, #44]	@ (8000a10 <LoopForever+0x12>)
 80009e2:	490c      	ldr	r1, [pc, #48]	@ (8000a14 <LoopForever+0x16>)
 80009e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000a18 <LoopForever+0x1a>)
 80009e6:	2300      	movs	r3, #0
 80009e8:	f7ff ffe7 	bl	80009ba <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80009ec:	480b      	ldr	r0, [pc, #44]	@ (8000a1c <LoopForever+0x1e>)
 80009ee:	490c      	ldr	r1, [pc, #48]	@ (8000a20 <LoopForever+0x22>)
 80009f0:	2300      	movs	r3, #0
 80009f2:	f7ff ffe8 	bl	80009c6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009f6:	f003 fc6f 	bl	80042d8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009fa:	f7ff fd51 	bl	80004a0 <main>

080009fe <LoopForever>:

LoopForever:
  b LoopForever
 80009fe:	e7fe      	b.n	80009fe <LoopForever>
  ldr   r0, =_estack
 8000a00:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000030 	.word	0x20000030
 8000a0c:	08004440 	.word	0x08004440
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000a10:	20030000 	.word	0x20030000
 8000a14:	20030000 	.word	0x20030000
 8000a18:	08004468 	.word	0x08004468
  INIT_BSS _sbss, _ebss
 8000a1c:	20000030 	.word	0x20000030
 8000a20:	20000148 	.word	0x20000148

08000a24 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC1_IRQHandler>

08000a26 <LL_AHB2_GRP1_EnableClock>:
{
 8000a26:	b480      	push	{r7}
 8000a28:	b085      	sub	sp, #20
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4013      	ands	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a64:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a74:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
}
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f7ff ffbd 	bl	8000a26 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	4a12      	ldr	r2, [pc, #72]	@ (8000af8 <BSP_LED_Init+0x6c>)
 8000ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ab4:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8000afc <BSP_LED_Init+0x70>)
 8000ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aca:	f107 020c 	add.w	r2, r7, #12
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 fb05 	bl	80010e0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <BSP_LED_Init+0x70>)
 8000ada:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	4a05      	ldr	r2, [pc, #20]	@ (8000af8 <BSP_LED_Init+0x6c>)
 8000ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f000 fc69 	bl	80013c0 <HAL_GPIO_WritePin>
}
 8000aee:	bf00      	nop
 8000af0:	3720      	adds	r7, #32
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	08004404 	.word	0x08004404
 8000afc:	2000000c 	.word	0x2000000c

08000b00 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4a07      	ldr	r2, [pc, #28]	@ (8000b2c <BSP_LED_On+0x2c>)
 8000b0e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	4a06      	ldr	r2, [pc, #24]	@ (8000b30 <BSP_LED_On+0x30>)
 8000b16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f000 fc4f 	bl	80013c0 <HAL_GPIO_WritePin>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000000c 	.word	0x2000000c
 8000b30:	08004404 	.word	0x08004404

08000b34 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	4a07      	ldr	r2, [pc, #28]	@ (8000b60 <BSP_LED_Off+0x2c>)
 8000b42:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	4a06      	ldr	r2, [pc, #24]	@ (8000b64 <BSP_LED_Off+0x30>)
 8000b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4619      	mov	r1, r3
 8000b52:	f000 fc35 	bl	80013c0 <HAL_GPIO_WritePin>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000000c 	.word	0x2000000c
 8000b64:	08004404 	.word	0x08004404

08000b68 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	460a      	mov	r2, r1
 8000b72:	71fb      	strb	r3, [r7, #7]
 8000b74:	4613      	mov	r3, r2
 8000b76:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d103      	bne.n	8000b96 <BSP_PB_Init+0x2e>
 8000b8e:	2004      	movs	r0, #4
 8000b90:	f7ff ff49 	bl	8000a26 <LL_AHB2_GRP1_EnableClock>
 8000b94:	e00c      	b.n	8000bb0 <BSP_PB_Init+0x48>
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d103      	bne.n	8000ba4 <BSP_PB_Init+0x3c>
 8000b9c:	2008      	movs	r0, #8
 8000b9e:	f7ff ff42 	bl	8000a26 <LL_AHB2_GRP1_EnableClock>
 8000ba2:	e005      	b.n	8000bb0 <BSP_PB_Init+0x48>
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d102      	bne.n	8000bb0 <BSP_PB_Init+0x48>
 8000baa:	2008      	movs	r0, #8
 8000bac:	f7ff ff3b 	bl	8000a26 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000bb0:	79bb      	ldrb	r3, [r7, #6]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d117      	bne.n	8000be6 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4a20      	ldr	r2, [pc, #128]	@ (8000c3c <BSP_PB_Init+0xd4>)
 8000bba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bbe:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	4a1c      	ldr	r2, [pc, #112]	@ (8000c40 <BSP_PB_Init+0xd8>)
 8000bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd4:	f107 020c 	add.w	r2, r7, #12
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 fa80 	bl	80010e0 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f000 f949 	bl	8000e78 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000be6:	79bb      	ldrb	r3, [r7, #6]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d123      	bne.n	8000c34 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4a13      	ldr	r2, [pc, #76]	@ (8000c3c <BSP_PB_Init+0xd4>)
 8000bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bf4:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8000bfa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bfe:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	4a0f      	ldr	r2, [pc, #60]	@ (8000c40 <BSP_PB_Init+0xd8>)
 8000c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c08:	f107 020c 	add.w	r2, r7, #12
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 fa66 	bl	80010e0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	4a0b      	ldr	r2, [pc, #44]	@ (8000c44 <BSP_PB_Init+0xdc>)
 8000c18:	5cd3      	ldrb	r3, [r2, r3]
 8000c1a:	b25b      	sxtb	r3, r3
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	210f      	movs	r1, #15
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 fa28 	bl	8001076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4a06      	ldr	r2, [pc, #24]	@ (8000c44 <BSP_PB_Init+0xdc>)
 8000c2a:	5cd3      	ldrb	r3, [r2, r3]
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fa3b 	bl	80010aa <HAL_NVIC_EnableIRQ>
  }
}
 8000c34:	bf00      	nop
 8000c36:	3720      	adds	r7, #32
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	0800440c 	.word	0x0800440c
 8000c40:	20000018 	.word	0x20000018
 8000c44:	08004414 	.word	0x08004414

08000c48 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d903      	bls.n	8000c66 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c5e:	f06f 0301 	mvn.w	r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	e018      	b.n	8000c98 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2294      	movs	r2, #148	@ 0x94
 8000c6a:	fb02 f303 	mul.w	r3, r2, r3
 8000c6e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca4 <BSP_COM_Init+0x5c>)
 8000c70:	4413      	add	r3, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f84a 	bl	8000d0c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	2294      	movs	r2, #148	@ 0x94
 8000c7c:	fb02 f303 	mul.w	r3, r2, r3
 8000c80:	4a08      	ldr	r2, [pc, #32]	@ (8000ca4 <BSP_COM_Init+0x5c>)
 8000c82:	4413      	add	r3, r2
 8000c84:	6839      	ldr	r1, [r7, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f80e 	bl	8000ca8 <MX_LPUART1_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000c92:	f06f 0303 	mvn.w	r3, #3
 8000c96:	e000      	b.n	8000c9a <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000c98:	68fb      	ldr	r3, [r7, #12]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000b0 	.word	0x200000b0

08000ca8 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000cb2:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <MX_LPUART1_Init+0x60>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	220c      	movs	r2, #12
 8000cc6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	895b      	ldrh	r3, [r3, #10]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	891b      	ldrh	r3, [r3, #8]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	899b      	ldrh	r3, [r3, #12]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cf4:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f002 fe44 	bl	8003984 <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000024 	.word	0x20000024

08000d0c <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000d14:	2002      	movs	r0, #2
 8000d16:	f7ff fe86 	bl	8000a26 <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f7ff fe83 	bl	8000a26 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000d20:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d24:	f7ff fe98 	bl	8000a58 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000d28:	2340      	movs	r3, #64	@ 0x40
 8000d2a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	4619      	mov	r1, r3
 8000d42:	4809      	ldr	r0, [pc, #36]	@ (8000d68 <COM1_MspInit+0x5c>)
 8000d44:	f000 f9cc 	bl	80010e0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000d48:	2380      	movs	r3, #128	@ 0x80
 8000d4a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000d50:	2307      	movs	r3, #7
 8000d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <COM1_MspInit+0x5c>)
 8000d5c:	f000 f9c0 	bl	80010e0 <HAL_GPIO_Init>
}
 8000d60:	bf00      	nop
 8000d62:	3720      	adds	r7, #32
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	48000400 	.word	0x48000400

08000d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d76:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <HAL_Init+0x3c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000da8 <HAL_Init+0x3c>)
 8000d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d80:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d82:	2003      	movs	r0, #3
 8000d84:	f000 f96c 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f000 f80f 	bl	8000dac <HAL_InitTick>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d002      	beq.n	8000d9a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	71fb      	strb	r3, [r7, #7]
 8000d98:	e001      	b.n	8000d9e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d9a:	f7ff fd25 	bl	80007e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	58004000 	.word	0x58004000

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000db8:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <HAL_InitTick+0x6c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d024      	beq.n	8000e0a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dc0:	f002 f8a8 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <HAL_InitTick+0x6c>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 f974 	bl	80010c6 <HAL_SYSTICK_Config>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d10f      	bne.n	8000e04 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b0f      	cmp	r3, #15
 8000de8:	d809      	bhi.n	8000dfe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dea:	2200      	movs	r2, #0
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	f04f 30ff 	mov.w	r0, #4294967295
 8000df2:	f000 f940 	bl	8001076 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df6:	4a09      	ldr	r2, [pc, #36]	@ (8000e1c <HAL_InitTick+0x70>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	e007      	b.n	8000e0e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	73fb      	strb	r3, [r7, #15]
 8000e02:	e004      	b.n	8000e0e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e001      	b.n	8000e0e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2000002c 	.word	0x2000002c
 8000e1c:	20000028 	.word	0x20000028

08000e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	2000002c 	.word	0x2000002c
 8000e44:	20000144 	.word	0x20000144

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000144 	.word	0x20000144

08000e60 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <HAL_GetTickPrio+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000028 	.word	0x20000028

08000e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff ffe2 	bl	8000e48 <HAL_GetTick>
 8000e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e90:	d005      	beq.n	8000e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <HAL_Delay+0x44>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9e:	bf00      	nop
 8000ea0:	f7ff ffd2 	bl	8000e48 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d8f7      	bhi.n	8000ea0 <HAL_Delay+0x28>
  {
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2000002c 	.word	0x2000002c

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0b      	blt.n	8000f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4907      	ldr	r1, [pc, #28]	@ (8000f5c <__NVIC_EnableIRQ+0x38>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	@ (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	@ (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	@ 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	@ 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800102c:	d301      	bcc.n	8001032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102e:	2301      	movs	r3, #1
 8001030:	e00f      	b.n	8001052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <SysTick_Config+0x40>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103a:	210f      	movs	r1, #15
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f7ff ff8e 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <SysTick_Config+0x40>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	@ (800105c <SysTick_Config+0x40>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff29 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001084:	f7ff ff40 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff90 	bl	8000fb4 <NVIC_EncodePriority>
 8001094:	4602      	mov	r2, r0
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5f 	bl	8000f60 <__NVIC_SetPriority>
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff33 	bl	8000f24 <__NVIC_EnableIRQ>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffa4 	bl	800101c <SysTick_Config>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ee:	e14c      	b.n	800138a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	2101      	movs	r1, #1
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	4013      	ands	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 813e 	beq.w	8001384 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b01      	cmp	r3, #1
 8001112:	d005      	beq.n	8001120 <HAL_GPIO_Init+0x40>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d130      	bne.n	8001182 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001156:	2201      	movs	r2, #1
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	091b      	lsrs	r3, r3, #4
 800116c:	f003 0201 	and.w	r2, r3, #1
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b03      	cmp	r3, #3
 800118c:	d017      	beq.n	80011be <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d123      	bne.n	8001212 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	08da      	lsrs	r2, r3, #3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3208      	adds	r2, #8
 800120c:	6939      	ldr	r1, [r7, #16]
 800120e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0203 	and.w	r2, r3, #3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 8098 	beq.w	8001384 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001254:	4a54      	ldr	r2, [pc, #336]	@ (80013a8 <HAL_GPIO_Init+0x2c8>)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	3302      	adds	r3, #2
 800125c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800127e:	d019      	beq.n	80012b4 <HAL_GPIO_Init+0x1d4>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a4a      	ldr	r2, [pc, #296]	@ (80013ac <HAL_GPIO_Init+0x2cc>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d013      	beq.n	80012b0 <HAL_GPIO_Init+0x1d0>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a49      	ldr	r2, [pc, #292]	@ (80013b0 <HAL_GPIO_Init+0x2d0>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d00d      	beq.n	80012ac <HAL_GPIO_Init+0x1cc>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a48      	ldr	r2, [pc, #288]	@ (80013b4 <HAL_GPIO_Init+0x2d4>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d007      	beq.n	80012a8 <HAL_GPIO_Init+0x1c8>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a47      	ldr	r2, [pc, #284]	@ (80013b8 <HAL_GPIO_Init+0x2d8>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d101      	bne.n	80012a4 <HAL_GPIO_Init+0x1c4>
 80012a0:	2304      	movs	r3, #4
 80012a2:	e008      	b.n	80012b6 <HAL_GPIO_Init+0x1d6>
 80012a4:	2307      	movs	r3, #7
 80012a6:	e006      	b.n	80012b6 <HAL_GPIO_Init+0x1d6>
 80012a8:	2303      	movs	r3, #3
 80012aa:	e004      	b.n	80012b6 <HAL_GPIO_Init+0x1d6>
 80012ac:	2302      	movs	r3, #2
 80012ae:	e002      	b.n	80012b6 <HAL_GPIO_Init+0x1d6>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <HAL_GPIO_Init+0x1d6>
 80012b4:	2300      	movs	r3, #0
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	f002 0203 	and.w	r2, r2, #3
 80012bc:	0092      	lsls	r2, r2, #2
 80012be:	4093      	lsls	r3, r2
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012c6:	4938      	ldr	r1, [pc, #224]	@ (80013a8 <HAL_GPIO_Init+0x2c8>)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012d4:	4b39      	ldr	r3, [pc, #228]	@ (80013bc <HAL_GPIO_Init+0x2dc>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012f8:	4a30      	ldr	r2, [pc, #192]	@ (80013bc <HAL_GPIO_Init+0x2dc>)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012fe:	4b2f      	ldr	r3, [pc, #188]	@ (80013bc <HAL_GPIO_Init+0x2dc>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001322:	4a26      	ldr	r2, [pc, #152]	@ (80013bc <HAL_GPIO_Init+0x2dc>)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001328:	4b24      	ldr	r3, [pc, #144]	@ (80013bc <HAL_GPIO_Init+0x2dc>)
 800132a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800134e:	4a1b      	ldr	r2, [pc, #108]	@ (80013bc <HAL_GPIO_Init+0x2dc>)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8001356:	4b19      	ldr	r3, [pc, #100]	@ (80013bc <HAL_GPIO_Init+0x2dc>)
 8001358:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800137c:	4a0f      	ldr	r2, [pc, #60]	@ (80013bc <HAL_GPIO_Init+0x2dc>)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	fa22 f303 	lsr.w	r3, r2, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	f47f aeab 	bne.w	80010f0 <HAL_GPIO_Init+0x10>
  }
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	371c      	adds	r7, #28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	40010000 	.word	0x40010000
 80013ac:	48000400 	.word	0x48000400
 80013b0:	48000800 	.word	0x48000800
 80013b4:	48000c00 	.word	0x48000c00
 80013b8:	48001000 	.word	0x48001000
 80013bc:	58000800 	.word	0x58000800

080013c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
 80013cc:	4613      	mov	r3, r2
 80013ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d0:	787b      	ldrb	r3, [r7, #1]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013dc:	e002      	b.n	80013e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013de:	887a      	ldrh	r2, [r7, #2]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013fa:	4b08      	ldr	r3, [pc, #32]	@ (800141c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	4013      	ands	r3, r2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d006      	beq.n	8001414 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f806 	bl	8001420 <HAL_GPIO_EXTI_Callback>
  }
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	58000800 	.word	0x58000800

08001420 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e08d      	b.n	8001564 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d106      	bne.n	8001462 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff f9cb 	bl	80007f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2224      	movs	r2, #36	@ 0x24
 8001466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0201 	bic.w	r2, r2, #1
 8001478:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001486:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001496:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d107      	bne.n	80014b0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	e006      	b.n	80014be <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80014bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d108      	bne.n	80014d8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	e007      	b.n	80014e8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014e6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014fa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68da      	ldr	r2, [r3, #12]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800150a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69d9      	ldr	r1, [r3, #28]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1a      	ldr	r2, [r3, #32]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f042 0201 	orr.w	r2, r2, #1
 8001544:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2220      	movs	r2, #32
 8001550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af02      	add	r7, sp, #8
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	4608      	mov	r0, r1
 8001576:	4611      	mov	r1, r2
 8001578:	461a      	mov	r2, r3
 800157a:	4603      	mov	r3, r0
 800157c:	817b      	strh	r3, [r7, #10]
 800157e:	460b      	mov	r3, r1
 8001580:	813b      	strh	r3, [r7, #8]
 8001582:	4613      	mov	r3, r2
 8001584:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b20      	cmp	r3, #32
 8001590:	f040 80fd 	bne.w	800178e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <HAL_I2C_Mem_Read+0x34>
 800159a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800159c:	2b00      	cmp	r3, #0
 800159e:	d105      	bne.n	80015ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0f1      	b.n	8001790 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <HAL_I2C_Mem_Read+0x4e>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e0ea      	b.n	8001790 <HAL_I2C_Mem_Read+0x224>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015c2:	f7ff fc41 	bl	8000e48 <HAL_GetTick>
 80015c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2319      	movs	r3, #25
 80015ce:	2201      	movs	r2, #1
 80015d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f000 f95b 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0d5      	b.n	8001790 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2222      	movs	r2, #34	@ 0x22
 80015e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2240      	movs	r2, #64	@ 0x40
 80015f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6a3a      	ldr	r2, [r7, #32]
 80015fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001604:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800160c:	88f8      	ldrh	r0, [r7, #6]
 800160e:	893a      	ldrh	r2, [r7, #8]
 8001610:	8979      	ldrh	r1, [r7, #10]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	4603      	mov	r3, r0
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 f8bf 	bl	80017a0 <I2C_RequestMemoryRead>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0ad      	b.n	8001790 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001638:	b29b      	uxth	r3, r3
 800163a:	2bff      	cmp	r3, #255	@ 0xff
 800163c:	d90e      	bls.n	800165c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	22ff      	movs	r2, #255	@ 0xff
 8001642:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001648:	b2da      	uxtb	r2, r3
 800164a:	8979      	ldrh	r1, [r7, #10]
 800164c:	4b52      	ldr	r3, [pc, #328]	@ (8001798 <HAL_I2C_Mem_Read+0x22c>)
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f000 fadf 	bl	8001c18 <I2C_TransferConfig>
 800165a:	e00f      	b.n	800167c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800166a:	b2da      	uxtb	r2, r3
 800166c:	8979      	ldrh	r1, [r7, #10]
 800166e:	4b4a      	ldr	r3, [pc, #296]	@ (8001798 <HAL_I2C_Mem_Read+0x22c>)
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 face 	bl	8001c18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001682:	2200      	movs	r2, #0
 8001684:	2104      	movs	r1, #4
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f000 f902 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e07c      	b.n	8001790 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b2:	3b01      	subs	r3, #1
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016be:	b29b      	uxth	r3, r3
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d034      	beq.n	800173c <HAL_I2C_Mem_Read+0x1d0>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d130      	bne.n	800173c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e0:	2200      	movs	r2, #0
 80016e2:	2180      	movs	r1, #128	@ 0x80
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f000 f8d3 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e04d      	b.n	8001790 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	2bff      	cmp	r3, #255	@ 0xff
 80016fc:	d90e      	bls.n	800171c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	22ff      	movs	r2, #255	@ 0xff
 8001702:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001708:	b2da      	uxtb	r2, r3
 800170a:	8979      	ldrh	r1, [r7, #10]
 800170c:	2300      	movs	r3, #0
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 fa7f 	bl	8001c18 <I2C_TransferConfig>
 800171a:	e00f      	b.n	800173c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001720:	b29a      	uxth	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800172a:	b2da      	uxtb	r2, r3
 800172c:	8979      	ldrh	r1, [r7, #10]
 800172e:	2300      	movs	r3, #0
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 fa6e 	bl	8001c18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001740:	b29b      	uxth	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d19a      	bne.n	800167c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 f940 	bl	80019d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e01a      	b.n	8001790 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2220      	movs	r2, #32
 8001760:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6859      	ldr	r1, [r3, #4]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <HAL_I2C_Mem_Read+0x230>)
 800176e:	400b      	ands	r3, r1
 8001770:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2220      	movs	r2, #32
 8001776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	e000      	b.n	8001790 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800178e:	2302      	movs	r3, #2
  }
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	80002400 	.word	0x80002400
 800179c:	fe00e800 	.word	0xfe00e800

080017a0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	4608      	mov	r0, r1
 80017aa:	4611      	mov	r1, r2
 80017ac:	461a      	mov	r2, r3
 80017ae:	4603      	mov	r3, r0
 80017b0:	817b      	strh	r3, [r7, #10]
 80017b2:	460b      	mov	r3, r1
 80017b4:	813b      	strh	r3, [r7, #8]
 80017b6:	4613      	mov	r3, r2
 80017b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	8979      	ldrh	r1, [r7, #10]
 80017c0:	4b20      	ldr	r3, [pc, #128]	@ (8001844 <I2C_RequestMemoryRead+0xa4>)
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2300      	movs	r3, #0
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 fa26 	bl	8001c18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	69b9      	ldr	r1, [r7, #24]
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 f8b6 	bl	8001942 <I2C_WaitOnTXISFlagUntilTimeout>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e02c      	b.n	800183a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d105      	bne.n	80017f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017e6:	893b      	ldrh	r3, [r7, #8]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80017f0:	e015      	b.n	800181e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80017f2:	893b      	ldrh	r3, [r7, #8]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	69b9      	ldr	r1, [r7, #24]
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 f89c 	bl	8001942 <I2C_WaitOnTXISFlagUntilTimeout>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e012      	b.n	800183a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001814:	893b      	ldrh	r3, [r7, #8]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	2200      	movs	r2, #0
 8001826:	2140      	movs	r1, #64	@ 0x40
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 f831 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	80002000 	.word	0x80002000

08001848 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b02      	cmp	r3, #2
 800185c:	d103      	bne.n	8001866 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2200      	movs	r2, #0
 8001864:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b01      	cmp	r3, #1
 8001872:	d007      	beq.n	8001884 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699a      	ldr	r2, [r3, #24]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	619a      	str	r2, [r3, #24]
  }
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	4613      	mov	r3, r2
 800189e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018a0:	e03b      	b.n	800191a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	6839      	ldr	r1, [r7, #0]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f8d6 	bl	8001a58 <I2C_IsErrorOccurred>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e041      	b.n	800193a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d02d      	beq.n	800191a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018be:	f7ff fac3 	bl	8000e48 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d302      	bcc.n	80018d4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d122      	bne.n	800191a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	699a      	ldr	r2, [r3, #24]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	4013      	ands	r3, r2
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	bf0c      	ite	eq
 80018e4:	2301      	moveq	r3, #1
 80018e6:	2300      	movne	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d113      	bne.n	800191a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f6:	f043 0220 	orr.w	r2, r3, #32
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2220      	movs	r2, #32
 8001902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	699a      	ldr	r2, [r3, #24]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4013      	ands	r3, r2
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	429a      	cmp	r2, r3
 8001928:	bf0c      	ite	eq
 800192a:	2301      	moveq	r3, #1
 800192c:	2300      	movne	r3, #0
 800192e:	b2db      	uxtb	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	429a      	cmp	r2, r3
 8001936:	d0b4      	beq.n	80018a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b084      	sub	sp, #16
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800194e:	e033      	b.n	80019b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	68b9      	ldr	r1, [r7, #8]
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 f87f 	bl	8001a58 <I2C_IsErrorOccurred>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e031      	b.n	80019c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196a:	d025      	beq.n	80019b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800196c:	f7ff fa6c 	bl	8000e48 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	429a      	cmp	r2, r3
 800197a:	d302      	bcc.n	8001982 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d11a      	bne.n	80019b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b02      	cmp	r3, #2
 800198e:	d013      	beq.n	80019b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001994:	f043 0220 	orr.w	r2, r3, #32
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2220      	movs	r2, #32
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e007      	b.n	80019c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d1c4      	bne.n	8001950 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019dc:	e02f      	b.n	8001a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f838 	bl	8001a58 <I2C_IsErrorOccurred>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e02d      	b.n	8001a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019f2:	f7ff fa29 	bl	8000e48 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d302      	bcc.n	8001a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d11a      	bne.n	8001a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	f003 0320 	and.w	r3, r3, #32
 8001a12:	2b20      	cmp	r3, #32
 8001a14:	d013      	beq.n	8001a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1a:	f043 0220 	orr.w	r2, r3, #32
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2220      	movs	r2, #32
 8001a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e007      	b.n	8001a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	2b20      	cmp	r3, #32
 8001a4a:	d1c8      	bne.n	80019de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	@ 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d068      	beq.n	8001b56 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2210      	movs	r2, #16
 8001a8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a8c:	e049      	b.n	8001b22 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a94:	d045      	beq.n	8001b22 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a96:	f7ff f9d7 	bl	8000e48 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d302      	bcc.n	8001aac <I2C_IsErrorOccurred+0x54>
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d13a      	bne.n	8001b22 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ab6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001abe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001aca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ace:	d121      	bne.n	8001b14 <I2C_IsErrorOccurred+0xbc>
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ad6:	d01d      	beq.n	8001b14 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001ad8:	7cfb      	ldrb	r3, [r7, #19]
 8001ada:	2b20      	cmp	r3, #32
 8001adc:	d01a      	beq.n	8001b14 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001aec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001aee:	f7ff f9ab 	bl	8000e48 <HAL_GetTick>
 8001af2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001af4:	e00e      	b.n	8001b14 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001af6:	f7ff f9a7 	bl	8000e48 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b19      	cmp	r3, #25
 8001b02:	d907      	bls.n	8001b14 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	f043 0320 	orr.w	r3, r3, #32
 8001b0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001b12:	e006      	b.n	8001b22 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 0320 	and.w	r3, r3, #32
 8001b1e:	2b20      	cmp	r3, #32
 8001b20:	d1e9      	bne.n	8001af6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	d003      	beq.n	8001b38 <I2C_IsErrorOccurred+0xe0>
 8001b30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0aa      	beq.n	8001a8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d103      	bne.n	8001b48 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2220      	movs	r2, #32
 8001b46:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00b      	beq.n	8001b80 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00b      	beq.n	8001ba2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	f043 0308 	orr.w	r3, r3, #8
 8001b90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00b      	beq.n	8001bc4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	f043 0302 	orr.w	r3, r3, #2
 8001bb2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d01c      	beq.n	8001c06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f7ff fe3b 	bl	8001848 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6859      	ldr	r1, [r3, #4]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <I2C_IsErrorOccurred+0x1bc>)
 8001bde:	400b      	ands	r3, r1
 8001be0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	431a      	orrs	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001c06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3728      	adds	r7, #40	@ 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	fe00e800 	.word	0xfe00e800

08001c18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	817b      	strh	r3, [r7, #10]
 8001c26:	4613      	mov	r3, r2
 8001c28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c2a:	897b      	ldrh	r3, [r7, #10]
 8001c2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c30:	7a7b      	ldrb	r3, [r7, #9]
 8001c32:	041b      	lsls	r3, r3, #16
 8001c34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	0d5b      	lsrs	r3, r3, #21
 8001c52:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001c56:	4b08      	ldr	r3, [pc, #32]	@ (8001c78 <I2C_TransferConfig+0x60>)
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	ea02 0103 	and.w	r1, r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c6a:	bf00      	nop
 8001c6c:	371c      	adds	r7, #28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	03ff63ff 	.word	0x03ff63ff

08001c7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b20      	cmp	r3, #32
 8001c90:	d138      	bne.n	8001d04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e032      	b.n	8001d06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2224      	movs	r2, #36	@ 0x24
 8001cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001cce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6819      	ldr	r1, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	e000      	b.n	8001d06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d04:	2302      	movs	r3, #2
  }
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b085      	sub	sp, #20
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	d139      	bne.n	8001d9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e033      	b.n	8001d9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2224      	movs	r2, #36	@ 0x24
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0201 	bic.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	021b      	lsls	r3, r3, #8
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	e000      	b.n	8001d9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d9c:	2302      	movs	r3, #2
  }
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dba:	6013      	str	r3, [r2, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	58000400 	.word	0x58000400

08001dcc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001dd0:	4b04      	ldr	r3, [pc, #16]	@ (8001de4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	58000400 	.word	0x58000400

08001de8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001df6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001dfa:	d101      	bne.n	8001e00 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e5a:	d101      	bne.n	8001e60 <LL_RCC_HSE_IsReady+0x18>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <LL_RCC_HSE_IsReady+0x1a>
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001e8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e9c:	6013      	str	r3, [r2, #0]
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001eac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eba:	d101      	bne.n	8001ec0 <LL_RCC_HSI_IsReady+0x18>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <LL_RCC_HSI_IsReady+0x1a>
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	061b      	lsls	r3, r3, #24
 8001ee2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d101      	bne.n	8001f52 <LL_RCC_HSI48_IsReady+0x18>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <LL_RCC_HSI48_IsReady+0x1a>
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fb2:	f043 0304 	orr.w	r3, r3, #4
 8001fb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fd4:	f023 0304 	bic.w	r3, r3, #4
 8001fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001fea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d101      	bne.n	8001ffe <LL_RCC_LSE_IsReady+0x18>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <LL_RCC_LSE_IsReady+0x1a>
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002016:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002038:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002052:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b02      	cmp	r3, #2
 8002060:	d101      	bne.n	8002066 <LL_RCC_LSI1_IsReady+0x18>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <LL_RCC_LSI1_IsReady+0x1a>
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002076:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800207a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800207e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800209c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020a4:	f023 0304 	bic.w	r3, r3, #4
 80020a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80020ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d101      	bne.n	80020ce <LL_RCC_LSI2_IsReady+0x18>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <LL_RCC_LSI2_IsReady+0x1a>
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80020e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6013      	str	r3, [r2, #0]
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800212a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	6013      	str	r3, [r2, #0]
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b02      	cmp	r3, #2
 8002154:	d101      	bne.n	800215a <LL_RCC_MSI_IsReady+0x16>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <LL_RCC_MSI_IsReady+0x18>
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800216e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002178:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800219e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2bb0      	cmp	r3, #176	@ 0xb0
 80021a4:	d901      	bls.n	80021aa <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80021a6:	23b0      	movs	r3, #176	@ 0xb0
 80021a8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80021aa:	687b      	ldr	r3, [r7, #4]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80021c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80021ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 0203 	bic.w	r2, r3, #3
 80021f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800220e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 030c 	and.w	r3, r3, #12
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800222a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002234:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4313      	orrs	r3, r2
 800223c:	608b      	str	r3, [r1, #8]
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002252:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002256:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800225a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800225e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800227e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002282:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002286:	f023 020f 	bic.w	r2, r3, #15
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4313      	orrs	r3, r2
 80022be:	608b      	str	r3, [r1, #8]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80022d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	608b      	str	r3, [r1, #8]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80022f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002302:	4618      	mov	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002314:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800232c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800235c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002366:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800236a:	6013      	str	r3, [r2, #0]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800237a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002384:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002388:	6013      	str	r3, [r2, #0]
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023a6:	d101      	bne.n	80023ac <LL_RCC_PLL_IsReady+0x18>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <LL_RCC_PLL_IsReady+0x1a>
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80023bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80023d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80023ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0303 	and.w	r3, r3, #3
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800242c:	d101      	bne.n	8002432 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002446:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800244a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002452:	d101      	bne.n	8002458 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002468:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800246c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002478:	d101      	bne.n	800247e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800248e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002498:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800249c:	d101      	bne.n	80024a2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80024b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80024c0:	d101      	bne.n	80024c6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b08d      	sub	sp, #52	@ 0x34
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e363      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 808d 	beq.w	800260e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f4:	f7ff fe89 	bl	800220a <LL_RCC_GetSysClkSource>
 80024f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024fa:	f7ff ff82 	bl	8002402 <LL_RCC_PLL_GetMainSource>
 80024fe:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_RCC_OscConfig+0x3e>
 8002506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002508:	2b0c      	cmp	r3, #12
 800250a:	d147      	bne.n	800259c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800250c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250e:	2b01      	cmp	r3, #1
 8002510:	d144      	bne.n	800259c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e347      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002522:	f7ff fe34 	bl	800218e <LL_RCC_MSI_GetRange>
 8002526:	4603      	mov	r3, r0
 8002528:	429c      	cmp	r4, r3
 800252a:	d914      	bls.n	8002556 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fd2f 	bl	8002f94 <RCC_SetFlashLatencyFromMSIRange>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e336      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fe0e 	bl	8002166 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fe32 	bl	80021b8 <LL_RCC_MSI_SetCalibTrimming>
 8002554:	e013      	b.n	800257e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fe03 	bl	8002166 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fe27 	bl	80021b8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fd10 	bl	8002f94 <RCC_SetFlashLatencyFromMSIRange>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e317      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800257e:	f000 fcc9 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002582:	4603      	mov	r3, r0
 8002584:	4aa4      	ldr	r2, [pc, #656]	@ (8002818 <HAL_RCC_OscConfig+0x344>)
 8002586:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002588:	4ba4      	ldr	r3, [pc, #656]	@ (800281c <HAL_RCC_OscConfig+0x348>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fc0d 	bl	8000dac <HAL_InitTick>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d039      	beq.n	800260c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e308      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01e      	beq.n	80025e2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025a4:	f7ff fdb0 	bl	8002108 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025a8:	f7fe fc4e 	bl	8000e48 <HAL_GetTick>
 80025ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025b0:	f7fe fc4a 	bl	8000e48 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e2f5      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80025c2:	f7ff fdbf 	bl	8002144 <LL_RCC_MSI_IsReady>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f1      	beq.n	80025b0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fdc8 	bl	8002166 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fdec 	bl	80021b8 <LL_RCC_MSI_SetCalibTrimming>
 80025e0:	e015      	b.n	800260e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025e2:	f7ff fda0 	bl	8002126 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025e6:	f7fe fc2f 	bl	8000e48 <HAL_GetTick>
 80025ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025ee:	f7fe fc2b 	bl	8000e48 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e2d6      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002600:	f7ff fda0 	bl	8002144 <LL_RCC_MSI_IsReady>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f1      	bne.n	80025ee <HAL_RCC_OscConfig+0x11a>
 800260a:	e000      	b.n	800260e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800260c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d047      	beq.n	80026aa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800261a:	f7ff fdf6 	bl	800220a <LL_RCC_GetSysClkSource>
 800261e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002620:	f7ff feef 	bl	8002402 <LL_RCC_PLL_GetMainSource>
 8002624:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	2b08      	cmp	r3, #8
 800262a:	d005      	beq.n	8002638 <HAL_RCC_OscConfig+0x164>
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	2b0c      	cmp	r3, #12
 8002630:	d108      	bne.n	8002644 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d105      	bne.n	8002644 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d134      	bne.n	80026aa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e2b4      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800264c:	d102      	bne.n	8002654 <HAL_RCC_OscConfig+0x180>
 800264e:	f7ff fbdd 	bl	8001e0c <LL_RCC_HSE_Enable>
 8002652:	e001      	b.n	8002658 <HAL_RCC_OscConfig+0x184>
 8002654:	f7ff fbe9 	bl	8001e2a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d012      	beq.n	8002686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe fbf2 	bl	8000e48 <HAL_GetTick>
 8002664:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002668:	f7fe fbee 	bl	8000e48 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	@ 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e299      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800267a:	f7ff fbe5 	bl	8001e48 <LL_RCC_HSE_IsReady>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f1      	beq.n	8002668 <HAL_RCC_OscConfig+0x194>
 8002684:	e011      	b.n	80026aa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7fe fbdf 	bl	8000e48 <HAL_GetTick>
 800268a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268e:	f7fe fbdb 	bl	8000e48 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b64      	cmp	r3, #100	@ 0x64
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e286      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80026a0:	f7ff fbd2 	bl	8001e48 <LL_RCC_HSE_IsReady>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f1      	bne.n	800268e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d04c      	beq.n	8002750 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026b6:	f7ff fda8 	bl	800220a <LL_RCC_GetSysClkSource>
 80026ba:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026bc:	f7ff fea1 	bl	8002402 <LL_RCC_PLL_GetMainSource>
 80026c0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_OscConfig+0x200>
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	d10e      	bne.n	80026ec <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d10b      	bne.n	80026ec <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e266      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fbf1 	bl	8001ecc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80026ea:	e031      	b.n	8002750 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d019      	beq.n	8002728 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f4:	f7ff fbba 	bl	8001e6c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7fe fba6 	bl	8000e48 <HAL_GetTick>
 80026fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002700:	f7fe fba2 	bl	8000e48 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e24d      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002712:	f7ff fbc9 	bl	8001ea8 <LL_RCC_HSI_IsReady>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f1      	beq.n	8002700 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fbd3 	bl	8001ecc <LL_RCC_HSI_SetCalibTrimming>
 8002726:	e013      	b.n	8002750 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002728:	f7ff fbaf 	bl	8001e8a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fb8c 	bl	8000e48 <HAL_GetTick>
 8002730:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002734:	f7fe fb88 	bl	8000e48 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e233      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002746:	f7ff fbaf 	bl	8001ea8 <LL_RCC_HSI_IsReady>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f1      	bne.n	8002734 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d106      	bne.n	800276a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80a3 	beq.w	80028b0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d076      	beq.n	8002860 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b00      	cmp	r3, #0
 800277c:	d046      	beq.n	800280c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800277e:	f7ff fc66 	bl	800204e <LL_RCC_LSI1_IsReady>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d113      	bne.n	80027b0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002788:	f7ff fc3f 	bl	800200a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800278c:	f7fe fb5c 	bl	8000e48 <HAL_GetTick>
 8002790:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002794:	f7fe fb58 	bl	8000e48 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e203      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80027a6:	f7ff fc52 	bl	800204e <LL_RCC_LSI1_IsReady>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f1      	beq.n	8002794 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80027b0:	f7ff fc5f 	bl	8002072 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe fb48 	bl	8000e48 <HAL_GetTick>
 80027b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80027bc:	f7fe fb44 	bl	8000e48 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e1ef      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80027ce:	f7ff fc72 	bl	80020b6 <LL_RCC_LSI2_IsReady>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f1      	beq.n	80027bc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fc7c 	bl	80020da <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80027e2:	f7ff fc23 	bl	800202c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7fe fb2f 	bl	8000e48 <HAL_GetTick>
 80027ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80027ee:	f7fe fb2b 	bl	8000e48 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e1d6      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002800:	f7ff fc25 	bl	800204e <LL_RCC_LSI1_IsReady>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f1      	bne.n	80027ee <HAL_RCC_OscConfig+0x31a>
 800280a:	e051      	b.n	80028b0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800280c:	f7ff fbfd 	bl	800200a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7fe fb1a 	bl	8000e48 <HAL_GetTick>
 8002814:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002816:	e00c      	b.n	8002832 <HAL_RCC_OscConfig+0x35e>
 8002818:	20000008 	.word	0x20000008
 800281c:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002820:	f7fe fb12 	bl	8000e48 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e1bd      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002832:	f7ff fc0c 	bl	800204e <LL_RCC_LSI1_IsReady>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f1      	beq.n	8002820 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800283c:	f7ff fc2a 	bl	8002094 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002842:	f7fe fb01 	bl	8000e48 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b03      	cmp	r3, #3
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e1ac      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002854:	f7ff fc2f 	bl	80020b6 <LL_RCC_LSI2_IsReady>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f1      	bne.n	8002842 <HAL_RCC_OscConfig+0x36e>
 800285e:	e027      	b.n	80028b0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002860:	f7ff fc18 	bl	8002094 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7fe faf0 	bl	8000e48 <HAL_GetTick>
 8002868:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800286c:	f7fe faec 	bl	8000e48 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b03      	cmp	r3, #3
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e197      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800287e:	f7ff fc1a 	bl	80020b6 <LL_RCC_LSI2_IsReady>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f1      	bne.n	800286c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002888:	f7ff fbd0 	bl	800202c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288c:	f7fe fadc 	bl	8000e48 <HAL_GetTick>
 8002890:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002894:	f7fe fad8 	bl	8000e48 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e183      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80028a6:	f7ff fbd2 	bl	800204e <LL_RCC_LSI1_IsReady>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f1      	bne.n	8002894 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d05b      	beq.n	8002974 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028bc:	4ba7      	ldr	r3, [pc, #668]	@ (8002b5c <HAL_RCC_OscConfig+0x688>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d114      	bne.n	80028f2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80028c8:	f7ff fa70 	bl	8001dac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028cc:	f7fe fabc 	bl	8000e48 <HAL_GetTick>
 80028d0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d4:	f7fe fab8 	bl	8000e48 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e163      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e6:	4b9d      	ldr	r3, [pc, #628]	@ (8002b5c <HAL_RCC_OscConfig+0x688>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d102      	bne.n	8002900 <HAL_RCC_OscConfig+0x42c>
 80028fa:	f7ff fb30 	bl	8001f5e <LL_RCC_LSE_Enable>
 80028fe:	e00c      	b.n	800291a <HAL_RCC_OscConfig+0x446>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b05      	cmp	r3, #5
 8002906:	d104      	bne.n	8002912 <HAL_RCC_OscConfig+0x43e>
 8002908:	f7ff fb4b 	bl	8001fa2 <LL_RCC_LSE_EnableBypass>
 800290c:	f7ff fb27 	bl	8001f5e <LL_RCC_LSE_Enable>
 8002910:	e003      	b.n	800291a <HAL_RCC_OscConfig+0x446>
 8002912:	f7ff fb35 	bl	8001f80 <LL_RCC_LSE_Disable>
 8002916:	f7ff fb55 	bl	8001fc4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d014      	beq.n	800294c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002922:	f7fe fa91 	bl	8000e48 <HAL_GetTick>
 8002926:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fe fa8d 	bl	8000e48 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e136      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002940:	f7ff fb51 	bl	8001fe6 <LL_RCC_LSE_IsReady>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0ef      	beq.n	800292a <HAL_RCC_OscConfig+0x456>
 800294a:	e013      	b.n	8002974 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7fe fa7c 	bl	8000e48 <HAL_GetTick>
 8002950:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002952:	e00a      	b.n	800296a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002954:	f7fe fa78 	bl	8000e48 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e121      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800296a:	f7ff fb3c 	bl	8001fe6 <LL_RCC_LSE_IsReady>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1ef      	bne.n	8002954 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800297c:	2b00      	cmp	r3, #0
 800297e:	d02c      	beq.n	80029da <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002984:	2b00      	cmp	r3, #0
 8002986:	d014      	beq.n	80029b2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002988:	f7ff fab5 	bl	8001ef6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298c:	f7fe fa5c 	bl	8000e48 <HAL_GetTick>
 8002990:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002994:	f7fe fa58 	bl	8000e48 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e103      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80029a6:	f7ff fac8 	bl	8001f3a <LL_RCC_HSI48_IsReady>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f1      	beq.n	8002994 <HAL_RCC_OscConfig+0x4c0>
 80029b0:	e013      	b.n	80029da <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029b2:	f7ff fab1 	bl	8001f18 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b6:	f7fe fa47 	bl	8000e48 <HAL_GetTick>
 80029ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029be:	f7fe fa43 	bl	8000e48 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e0ee      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80029d0:	f7ff fab3 	bl	8001f3a <LL_RCC_HSI48_IsReady>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f1      	bne.n	80029be <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 80e4 	beq.w	8002bac <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e4:	f7ff fc11 	bl	800220a <LL_RCC_GetSysClkSource>
 80029e8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80029ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	f040 80b4 	bne.w	8002b64 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 0203 	and.w	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d123      	bne.n	8002a52 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d11c      	bne.n	8002a52 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d114      	bne.n	8002a52 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d10d      	bne.n	8002a52 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d106      	bne.n	8002a52 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d05d      	beq.n	8002b0e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b0c      	cmp	r3, #12
 8002a56:	d058      	beq.n	8002b0a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0a1      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a6a:	f7ff fc84 	bl	8002376 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a6e:	f7fe f9eb 	bl	8000e48 <HAL_GetTick>
 8002a72:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a76:	f7fe f9e7 	bl	8000e48 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e092      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1ef      	bne.n	8002a76 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	4b30      	ldr	r3, [pc, #192]	@ (8002b60 <HAL_RCC_OscConfig+0x68c>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002aa8:	4311      	orrs	r1, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002aae:	0212      	lsls	r2, r2, #8
 8002ab0:	4311      	orrs	r1, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ab6:	4311      	orrs	r1, r2
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002abc:	4311      	orrs	r1, r2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002acc:	f7ff fc44 	bl	8002358 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ade:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ae0:	f7fe f9b2 	bl	8000e48 <HAL_GetTick>
 8002ae4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae8:	f7fe f9ae 	bl	8000e48 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e059      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002afa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ef      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b08:	e050      	b.n	8002bac <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e04f      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d147      	bne.n	8002bac <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b1c:	f7ff fc1c 	bl	8002358 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b30:	f7fe f98a 	bl	8000e48 <HAL_GetTick>
 8002b34:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b38:	f7fe f986 	bl	8000e48 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e031      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0ef      	beq.n	8002b38 <HAL_RCC_OscConfig+0x664>
 8002b58:	e028      	b.n	8002bac <HAL_RCC_OscConfig+0x6d8>
 8002b5a:	bf00      	nop
 8002b5c:	58000400 	.word	0x58000400
 8002b60:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	2b0c      	cmp	r3, #12
 8002b68:	d01e      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	f7ff fc04 	bl	8002376 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6e:	f7fe f96b 	bl	8000e48 <HAL_GetTick>
 8002b72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b76:	f7fe f967 	bl	8000e48 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e012      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1ef      	bne.n	8002b76 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ba0:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <HAL_RCC_OscConfig+0x6e4>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	60cb      	str	r3, [r1, #12]
 8002ba6:	e001      	b.n	8002bac <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3734      	adds	r7, #52	@ 0x34
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd90      	pop	{r4, r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	eefefffc 	.word	0xeefefffc

08002bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e12d      	b.n	8002e2c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b98      	ldr	r3, [pc, #608]	@ (8002e34 <HAL_RCC_ClockConfig+0x278>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d91b      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b95      	ldr	r3, [pc, #596]	@ (8002e34 <HAL_RCC_ClockConfig+0x278>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 0207 	bic.w	r2, r3, #7
 8002be6:	4993      	ldr	r1, [pc, #588]	@ (8002e34 <HAL_RCC_ClockConfig+0x278>)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bee:	f7fe f92b 	bl	8000e48 <HAL_GetTick>
 8002bf2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bf6:	f7fe f927 	bl	8000e48 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e111      	b.n	8002e2c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c08:	4b8a      	ldr	r3, [pc, #552]	@ (8002e34 <HAL_RCC_ClockConfig+0x278>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d1ef      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d016      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fafb 	bl	8002222 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c2c:	f7fe f90c 	bl	8000e48 <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c34:	f7fe f908 	bl	8000e48 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e0f2      	b.n	8002e2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002c46:	f7ff fbe8 	bl	800241a <LL_RCC_IsActiveFlag_HPRE>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0f1      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d016      	beq.n	8002c8a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff faf2 	bl	800224a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c66:	f7fe f8ef 	bl	8000e48 <HAL_GetTick>
 8002c6a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c6e:	f7fe f8eb 	bl	8000e48 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e0d5      	b.n	8002e2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002c80:	f7ff fbdd 	bl	800243e <LL_RCC_IsActiveFlag_C2HPRE>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f1      	beq.n	8002c6e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d016      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff faeb 	bl	8002276 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ca0:	f7fe f8d2 	bl	8000e48 <HAL_GetTick>
 8002ca4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ca8:	f7fe f8ce 	bl	8000e48 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e0b8      	b.n	8002e2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002cba:	f7ff fbd3 	bl	8002464 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f1      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d016      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fae5 	bl	80022a4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002cda:	f7fe f8b5 	bl	8000e48 <HAL_GetTick>
 8002cde:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ce2:	f7fe f8b1 	bl	8000e48 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e09b      	b.n	8002e2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002cf4:	f7ff fbc9 	bl	800248a <LL_RCC_IsActiveFlag_PPRE1>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f1      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d017      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fadb 	bl	80022cc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d16:	f7fe f897 	bl	8000e48 <HAL_GetTick>
 8002d1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d1e:	f7fe f893 	bl	8000e48 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e07d      	b.n	8002e2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002d30:	f7ff fbbd 	bl	80024ae <LL_RCC_IsActiveFlag_PPRE2>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f1      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d043      	beq.n	8002dce <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d106      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002d4e:	f7ff f87b 	bl	8001e48 <LL_RCC_HSE_IsReady>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d11e      	bne.n	8002d96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e067      	b.n	8002e2c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d106      	bne.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002d64:	f7ff fb16 	bl	8002394 <LL_RCC_PLL_IsReady>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d113      	bne.n	8002d96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e05c      	b.n	8002e2c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002d7a:	f7ff f9e3 	bl	8002144 <LL_RCC_MSI_IsReady>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d108      	bne.n	8002d96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e051      	b.n	8002e2c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002d88:	f7ff f88e 	bl	8001ea8 <LL_RCC_HSI_IsReady>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e04a      	b.n	8002e2c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fa21 	bl	80021e2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da0:	f7fe f852 	bl	8000e48 <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	e00a      	b.n	8002dbe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da8:	f7fe f84e 	bl	8000e48 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e036      	b.n	8002e2c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	f7ff fa24 	bl	800220a <LL_RCC_GetSysClkSource>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d1ec      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dce:	4b19      	ldr	r3, [pc, #100]	@ (8002e34 <HAL_RCC_ClockConfig+0x278>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d21b      	bcs.n	8002e14 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ddc:	4b15      	ldr	r3, [pc, #84]	@ (8002e34 <HAL_RCC_ClockConfig+0x278>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f023 0207 	bic.w	r2, r3, #7
 8002de4:	4913      	ldr	r1, [pc, #76]	@ (8002e34 <HAL_RCC_ClockConfig+0x278>)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dec:	f7fe f82c 	bl	8000e48 <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002df4:	f7fe f828 	bl	8000e48 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e012      	b.n	8002e2c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e06:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <HAL_RCC_ClockConfig+0x278>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d1ef      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e14:	f000 f87e 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	4a07      	ldr	r2, [pc, #28]	@ (8002e38 <HAL_RCC_ClockConfig+0x27c>)
 8002e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002e1e:	f7fe f81f 	bl	8000e60 <HAL_GetTickPrio>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd ffc1 	bl	8000dac <HAL_InitTick>
 8002e2a:	4603      	mov	r3, r0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	58004000 	.word	0x58004000
 8002e38:	20000008 	.word	0x20000008

08002e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e42:	f7ff f9e2 	bl	800220a <LL_RCC_GetSysClkSource>
 8002e46:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10a      	bne.n	8002e64 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002e4e:	f7ff f99e 	bl	800218e <LL_RCC_MSI_GetRange>
 8002e52:	4603      	mov	r3, r0
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8002f08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	e04b      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d102      	bne.n	8002e70 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e6a:	4b28      	ldr	r3, [pc, #160]	@ (8002f0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	e045      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d10a      	bne.n	8002e8c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002e76:	f7fe ffb7 	bl	8001de8 <LL_RCC_HSE_IsEnabledDiv2>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d102      	bne.n	8002e86 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002e80:	4b22      	ldr	r3, [pc, #136]	@ (8002f0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	e03a      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002e86:	4b22      	ldr	r3, [pc, #136]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	e037      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002e8c:	f7ff fab9 	bl	8002402 <LL_RCC_PLL_GetMainSource>
 8002e90:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d003      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x64>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d003      	beq.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x6a>
 8002e9e:	e00d      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ea2:	60bb      	str	r3, [r7, #8]
        break;
 8002ea4:	e015      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002ea6:	f7fe ff9f 	bl	8001de8 <LL_RCC_HSE_IsEnabledDiv2>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d102      	bne.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002eb0:	4b16      	ldr	r3, [pc, #88]	@ (8002f0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002eb2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002eb4:	e00d      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002eb6:	4b16      	ldr	r3, [pc, #88]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002eb8:	60bb      	str	r3, [r7, #8]
        break;
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002ebc:	f7ff f967 	bl	800218e <LL_RCC_MSI_GetRange>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	4a0f      	ldr	r2, [pc, #60]	@ (8002f08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ece:	60bb      	str	r3, [r7, #8]
        break;
 8002ed0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002ed2:	f7ff fa71 	bl	80023b8 <LL_RCC_PLL_GetN>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	fb03 f402 	mul.w	r4, r3, r2
 8002ede:	f7ff fa84 	bl	80023ea <LL_RCC_PLL_GetDivider>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	fbb4 f4f3 	udiv	r4, r4, r3
 8002eec:	f7ff fa71 	bl	80023d2 <LL_RCC_PLL_GetR>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	0f5b      	lsrs	r3, r3, #29
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	fbb4 f3f3 	udiv	r3, r4, r3
 8002efa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002efc:	68fb      	ldr	r3, [r7, #12]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd90      	pop	{r4, r7, pc}
 8002f06:	bf00      	nop
 8002f08:	080043c4 	.word	0x080043c4
 8002f0c:	00f42400 	.word	0x00f42400
 8002f10:	01e84800 	.word	0x01e84800

08002f14 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f14:	b598      	push	{r3, r4, r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002f18:	f7ff ff90 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8002f1c:	4604      	mov	r4, r0
 8002f1e:	f7ff f9e9 	bl	80022f4 <LL_RCC_GetAHBPrescaler>
 8002f22:	4603      	mov	r3, r0
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	4a03      	ldr	r2, [pc, #12]	@ (8002f38 <HAL_RCC_GetHCLKFreq+0x24>)
 8002f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f30:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd98      	pop	{r3, r4, r7, pc}
 8002f38:	08004364 	.word	0x08004364

08002f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f3c:	b598      	push	{r3, r4, r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002f40:	f7ff ffe8 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f44:	4604      	mov	r4, r0
 8002f46:	f7ff f9ef 	bl	8002328 <LL_RCC_GetAPB1Prescaler>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	4a04      	ldr	r2, [pc, #16]	@ (8002f64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	bd98      	pop	{r3, r4, r7, pc}
 8002f64:	080043a4 	.word	0x080043a4

08002f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f68:	b598      	push	{r3, r4, r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002f6c:	f7ff ffd2 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f70:	4604      	mov	r4, r0
 8002f72:	f7ff f9e5 	bl	8002340 <LL_RCC_GetAPB2Prescaler>
 8002f76:	4603      	mov	r3, r0
 8002f78:	0adb      	lsrs	r3, r3, #11
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	4a04      	ldr	r2, [pc, #16]	@ (8002f90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	bd98      	pop	{r3, r4, r7, pc}
 8002f90:	080043a4 	.word	0x080043a4

08002f94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2bb0      	cmp	r3, #176	@ 0xb0
 8002fa0:	d903      	bls.n	8002faa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002fa2:	4b15      	ldr	r3, [pc, #84]	@ (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	e007      	b.n	8002fba <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	4a11      	ldr	r2, [pc, #68]	@ (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002fba:	f7ff f9a7 	bl	800230c <LL_RCC_GetAHB4Prescaler>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8002ffc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8003000 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	0c9c      	lsrs	r4, r3, #18
 8002fde:	f7fe fef5 	bl	8001dcc <HAL_PWREx_GetVoltageRange>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	f000 f80c 	bl	8003004 <RCC_SetFlashLatency>
 8002fec:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd90      	pop	{r4, r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	080043c4 	.word	0x080043c4
 8002ffc:	08004364 	.word	0x08004364
 8003000:	431bde83 	.word	0x431bde83

08003004 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b093      	sub	sp, #76	@ 0x4c
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800300e:	4b37      	ldr	r3, [pc, #220]	@ (80030ec <RCC_SetFlashLatency+0xe8>)
 8003010:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003014:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003016:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800301a:	4a35      	ldr	r2, [pc, #212]	@ (80030f0 <RCC_SetFlashLatency+0xec>)
 800301c:	f107 031c 	add.w	r3, r7, #28
 8003020:	ca07      	ldmia	r2, {r0, r1, r2}
 8003022:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003026:	4b33      	ldr	r3, [pc, #204]	@ (80030f4 <RCC_SetFlashLatency+0xf0>)
 8003028:	f107 040c 	add.w	r4, r7, #12
 800302c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800302e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003032:	2300      	movs	r3, #0
 8003034:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800303c:	d11a      	bne.n	8003074 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800303e:	2300      	movs	r3, #0
 8003040:	643b      	str	r3, [r7, #64]	@ 0x40
 8003042:	e013      	b.n	800306c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	3348      	adds	r3, #72	@ 0x48
 800304a:	443b      	add	r3, r7
 800304c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	429a      	cmp	r2, r3
 8003054:	d807      	bhi.n	8003066 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	3348      	adds	r3, #72	@ 0x48
 800305c:	443b      	add	r3, r7
 800305e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003062:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003064:	e020      	b.n	80030a8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003068:	3301      	adds	r3, #1
 800306a:	643b      	str	r3, [r7, #64]	@ 0x40
 800306c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800306e:	2b03      	cmp	r3, #3
 8003070:	d9e8      	bls.n	8003044 <RCC_SetFlashLatency+0x40>
 8003072:	e019      	b.n	80030a8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003074:	2300      	movs	r3, #0
 8003076:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003078:	e013      	b.n	80030a2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800307a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	3348      	adds	r3, #72	@ 0x48
 8003080:	443b      	add	r3, r7
 8003082:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	429a      	cmp	r2, r3
 800308a:	d807      	bhi.n	800309c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800308c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	3348      	adds	r3, #72	@ 0x48
 8003092:	443b      	add	r3, r7
 8003094:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003098:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800309a:	e005      	b.n	80030a8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800309c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800309e:	3301      	adds	r3, #1
 80030a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d9e8      	bls.n	800307a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80030a8:	4b13      	ldr	r3, [pc, #76]	@ (80030f8 <RCC_SetFlashLatency+0xf4>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f023 0207 	bic.w	r2, r3, #7
 80030b0:	4911      	ldr	r1, [pc, #68]	@ (80030f8 <RCC_SetFlashLatency+0xf4>)
 80030b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b4:	4313      	orrs	r3, r2
 80030b6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030b8:	f7fd fec6 	bl	8000e48 <HAL_GetTick>
 80030bc:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80030be:	e008      	b.n	80030d2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80030c0:	f7fd fec2 	bl	8000e48 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e007      	b.n	80030e2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80030d2:	4b09      	ldr	r3, [pc, #36]	@ (80030f8 <RCC_SetFlashLatency+0xf4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030dc:	429a      	cmp	r2, r3
 80030de:	d1ef      	bne.n	80030c0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	374c      	adds	r7, #76	@ 0x4c
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd90      	pop	{r4, r7, pc}
 80030ea:	bf00      	nop
 80030ec:	08004338 	.word	0x08004338
 80030f0:	08004348 	.word	0x08004348
 80030f4:	08004354 	.word	0x08004354
 80030f8:	58004000 	.word	0x58004000

080030fc <LL_RCC_LSE_IsEnabled>:
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <LL_RCC_LSE_IsEnabled+0x18>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <LL_RCC_LSE_IsEnabled+0x1a>
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_RCC_LSE_IsReady>:
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b02      	cmp	r3, #2
 8003132:	d101      	bne.n	8003138 <LL_RCC_LSE_IsReady+0x18>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <LL_RCC_LSE_IsReady+0x1a>
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <LL_RCC_SetRFWKPClockSource>:
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800314c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003150:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003154:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003158:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <LL_RCC_SetSMPSClockSource>:
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	f023 0203 	bic.w	r2, r3, #3
 8003182:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4313      	orrs	r3, r2
 800318a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_RCC_SetSMPSPrescaler>:
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80031a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80031aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_RCC_SetUSARTClockSource>:
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80031c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d0:	f023 0203 	bic.w	r2, r3, #3
 80031d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <LL_RCC_SetLPUARTClockSource>:
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80031f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003200:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <LL_RCC_SetI2CClockSource>:
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003224:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	091b      	lsrs	r3, r3, #4
 800322c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003230:	43db      	mvns	r3, r3
 8003232:	401a      	ands	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800323c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <LL_RCC_SetLPTIMClockSource>:
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800325a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800325e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	0c1b      	lsrs	r3, r3, #16
 8003266:	041b      	lsls	r3, r3, #16
 8003268:	43db      	mvns	r3, r3
 800326a:	401a      	ands	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	041b      	lsls	r3, r3, #16
 8003270:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <LL_RCC_SetSAIClockSource>:
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800328e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003296:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800329a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <LL_RCC_SetRNGClockSource>:
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80032ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80032c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <LL_RCC_SetCLK48ClockSource>:
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80032e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <LL_RCC_SetUSBClockSource>:
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff ffe3 	bl	80032de <LL_RCC_SetCLK48ClockSource>
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <LL_RCC_SetADCClockSource>:
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003330:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003334:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <LL_RCC_SetRTCClockSource>:
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003360:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <LL_RCC_GetRTCClockSource>:
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800337c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003384:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <LL_RCC_ForceBackupDomainReset>:
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003396:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80033aa:	bf00      	nop
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80033b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <LL_RCC_PLLSAI1_Enable>:
{
 80033d6:	b480      	push	{r7}
 80033d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80033da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033e8:	6013      	str	r3, [r2, #0]
}
 80033ea:	bf00      	nop
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <LL_RCC_PLLSAI1_Disable>:
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80033f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003402:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003406:	6013      	str	r3, [r2, #0]
}
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_RCC_PLLSAI1_IsReady>:
{
 8003412:	b480      	push	{r7}
 8003414:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003416:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003420:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003424:	d101      	bne.n	800342a <LL_RCC_PLLSAI1_IsReady+0x18>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b088      	sub	sp, #32
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800343e:	2300      	movs	r3, #0
 8003440:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003442:	2300      	movs	r3, #0
 8003444:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d034      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800345a:	d021      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800345c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003460:	d81b      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003462:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003466:	d01d      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003468:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800346c:	d815      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00b      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003472:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003476:	d110      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003482:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003486:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003488:	e00d      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3304      	adds	r3, #4
 800348e:	4618      	mov	r0, r3
 8003490:	f000 f947 	bl	8003722 <RCCEx_PLLSAI1_ConfigNP>
 8003494:	4603      	mov	r3, r0
 8003496:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003498:	e005      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	77fb      	strb	r3, [r7, #31]
        break;
 800349e:	e002      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80034a0:	bf00      	nop
 80034a2:	e000      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80034a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a6:	7ffb      	ldrb	r3, [r7, #31]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d105      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fee8 	bl	8003286 <LL_RCC_SetSAIClockSource>
 80034b6:	e001      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b8:	7ffb      	ldrb	r3, [r7, #31]
 80034ba:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d046      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80034c8:	f7ff ff56 	bl	8003378 <LL_RCC_GetRTCClockSource>
 80034cc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d03c      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80034d8:	f7fe fc68 	bl	8001dac <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d105      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff ff30 	bl	800334c <LL_RCC_SetRTCClockSource>
 80034ec:	e02e      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80034ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80034f8:	f7ff ff4b 	bl	8003392 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80034fc:	f7ff ff5a 	bl	80033b4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800350e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003518:	f7ff fdf0 	bl	80030fc <LL_RCC_LSE_IsEnabled>
 800351c:	4603      	mov	r3, r0
 800351e:	2b01      	cmp	r3, #1
 8003520:	d114      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003522:	f7fd fc91 	bl	8000e48 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003528:	e00b      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352a:	f7fd fc8d 	bl	8000e48 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003538:	4293      	cmp	r3, r2
 800353a:	d902      	bls.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	77fb      	strb	r3, [r7, #31]
              break;
 8003540:	e004      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003542:	f7ff fded 	bl	8003120 <LL_RCC_LSE_IsReady>
 8003546:	4603      	mov	r3, r0
 8003548:	2b01      	cmp	r3, #1
 800354a:	d1ee      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800354c:	7ffb      	ldrb	r3, [r7, #31]
 800354e:	77bb      	strb	r3, [r7, #30]
 8003550:	e001      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003552:	7ffb      	ldrb	r3, [r7, #31]
 8003554:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d004      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fe2a 	bl	80031c0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d004      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fe35 	bl	80031ec <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	2b00      	cmp	r3, #0
 800358c:	d004      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fe5d 	bl	8003252 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d004      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fe52 	bl	8003252 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d004      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff fe2a 	bl	8003218 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d004      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fe1f 	bl	8003218 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d022      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fe8d 	bl	800330a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035f8:	d107      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80035fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003604:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003608:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800360e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003612:	d10b      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3304      	adds	r3, #4
 8003618:	4618      	mov	r0, r3
 800361a:	f000 f8dd 	bl	80037d8 <RCCEx_PLLSAI1_ConfigNQ>
 800361e:	4603      	mov	r3, r0
 8003620:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003622:	7ffb      	ldrb	r3, [r7, #31]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003628:	7ffb      	ldrb	r3, [r7, #31]
 800362a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003634:	2b00      	cmp	r3, #0
 8003636:	d02b      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003640:	d008      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003646:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800364a:	d003      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003650:	2b00      	cmp	r3, #0
 8003652:	d105      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fe2a 	bl	80032b2 <LL_RCC_SetRNGClockSource>
 800365e:	e00a      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003664:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	2000      	movs	r0, #0
 800366c:	f7ff fe21 	bl	80032b2 <LL_RCC_SetRNGClockSource>
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7ff fe34 	bl	80032de <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800367e:	d107      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800368a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800368e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003698:	2b00      	cmp	r3, #0
 800369a:	d022      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff fe3d 	bl	8003320 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036ae:	d107      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036be:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036c8:	d10b      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f8dd 	bl	800388e <RCCEx_PLLSAI1_ConfigNR>
 80036d4:	4603      	mov	r3, r0
 80036d6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80036d8:	7ffb      	ldrb	r3, [r7, #31]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80036de:	7ffb      	ldrb	r3, [r7, #31]
 80036e0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d004      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fd26 	bl	8003144 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d009      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff fd45 	bl	8003198 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff fd2c 	bl	8003170 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003718:	7fbb      	ldrb	r3, [r7, #30]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800372e:	f7ff fe61 	bl	80033f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003732:	f7fd fb89 	bl	8000e48 <HAL_GetTick>
 8003736:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003738:	e009      	b.n	800374e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800373a:	f7fd fb85 	bl	8000e48 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d902      	bls.n	800374e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	73fb      	strb	r3, [r7, #15]
      break;
 800374c:	e004      	b.n	8003758 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800374e:	f7ff fe60 	bl	8003412 <LL_RCC_PLLSAI1_IsReady>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f0      	bne.n	800373a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d137      	bne.n	80037ce <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800375e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003772:	4313      	orrs	r3, r2
 8003774:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003788:	4313      	orrs	r3, r2
 800378a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800378c:	f7ff fe23 	bl	80033d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003790:	f7fd fb5a 	bl	8000e48 <HAL_GetTick>
 8003794:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003796:	e009      	b.n	80037ac <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003798:	f7fd fb56 	bl	8000e48 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d902      	bls.n	80037ac <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	73fb      	strb	r3, [r7, #15]
        break;
 80037aa:	e004      	b.n	80037b6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037ac:	f7ff fe31 	bl	8003412 <LL_RCC_PLLSAI1_IsReady>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d1f0      	bne.n	8003798 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d108      	bne.n	80037ce <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80037bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037ca:	4313      	orrs	r3, r2
 80037cc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80037e4:	f7ff fe06 	bl	80033f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80037e8:	f7fd fb2e 	bl	8000e48 <HAL_GetTick>
 80037ec:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80037ee:	e009      	b.n	8003804 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037f0:	f7fd fb2a 	bl	8000e48 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d902      	bls.n	8003804 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	73fb      	strb	r3, [r7, #15]
      break;
 8003802:	e004      	b.n	800380e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003804:	f7ff fe05 	bl	8003412 <LL_RCC_PLLSAI1_IsReady>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d137      	bne.n	8003884 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003828:	4313      	orrs	r3, r2
 800382a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800382c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800383e:	4313      	orrs	r3, r2
 8003840:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003842:	f7ff fdc8 	bl	80033d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003846:	f7fd faff 	bl	8000e48 <HAL_GetTick>
 800384a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800384c:	e009      	b.n	8003862 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800384e:	f7fd fafb 	bl	8000e48 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d902      	bls.n	8003862 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	73fb      	strb	r3, [r7, #15]
        break;
 8003860:	e004      	b.n	800386c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003862:	f7ff fdd6 	bl	8003412 <LL_RCC_PLLSAI1_IsReady>
 8003866:	4603      	mov	r3, r0
 8003868:	2b01      	cmp	r3, #1
 800386a:	d1f0      	bne.n	800384e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d108      	bne.n	8003884 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003880:	4313      	orrs	r3, r2
 8003882:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003884:	7bfb      	ldrb	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800389a:	f7ff fdab 	bl	80033f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800389e:	f7fd fad3 	bl	8000e48 <HAL_GetTick>
 80038a2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038a4:	e009      	b.n	80038ba <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038a6:	f7fd facf 	bl	8000e48 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d902      	bls.n	80038ba <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	73fb      	strb	r3, [r7, #15]
      break;
 80038b8:	e004      	b.n	80038c4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038ba:	f7ff fdaa 	bl	8003412 <LL_RCC_PLLSAI1_IsReady>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1f0      	bne.n	80038a6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d137      	bne.n	800393a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80038ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038de:	4313      	orrs	r3, r2
 80038e0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80038e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038f4:	4313      	orrs	r3, r2
 80038f6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80038f8:	f7ff fd6d 	bl	80033d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038fc:	f7fd faa4 	bl	8000e48 <HAL_GetTick>
 8003900:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003902:	e009      	b.n	8003918 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003904:	f7fd faa0 	bl	8000e48 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d902      	bls.n	8003918 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	73fb      	strb	r3, [r7, #15]
        break;
 8003916:	e004      	b.n	8003922 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003918:	f7ff fd7b 	bl	8003412 <LL_RCC_PLLSAI1_IsReady>
 800391c:	4603      	mov	r3, r0
 800391e:	2b01      	cmp	r3, #1
 8003920:	d1f0      	bne.n	8003904 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d108      	bne.n	800393a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003936:	4313      	orrs	r3, r2
 8003938:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800393a:	7bfb      	ldrb	r3, [r7, #15]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <LL_RCC_GetUSARTClockSource>:
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800394c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003950:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4013      	ands	r3, r2
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <LL_RCC_GetLPUARTClockSource>:
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800396c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003970:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4013      	ands	r3, r2
}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e042      	b.n	8003a1c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800399c:	2b00      	cmp	r3, #0
 800399e:	d106      	bne.n	80039ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f83b 	bl	8003a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2224      	movs	r2, #36	@ 0x24
 80039b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0201 	bic.w	r2, r2, #1
 80039c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fa5a 	bl	8003e88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f82f 	bl	8003a38 <UART_SetConfig>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e01b      	b.n	8003a1c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fad9 	bl	8003fcc <UART_CheckIdleState>
 8003a1a:	4603      	mov	r3, r0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a3c:	b08c      	sub	sp, #48	@ 0x30
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	431a      	orrs	r2, r3
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4baf      	ldr	r3, [pc, #700]	@ (8003d24 <UART_SetConfig+0x2ec>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a70:	430b      	orrs	r3, r1
 8003a72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4aa4      	ldr	r2, [pc, #656]	@ (8003d28 <UART_SetConfig+0x2f0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d004      	beq.n	8003aa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003aae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac2:	f023 010f 	bic.w	r1, r3, #15
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a95      	ldr	r2, [pc, #596]	@ (8003d2c <UART_SetConfig+0x2f4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d125      	bne.n	8003b28 <UART_SetConfig+0xf0>
 8003adc:	2003      	movs	r0, #3
 8003ade:	f7ff ff31 	bl	8003944 <LL_RCC_GetUSARTClockSource>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d81b      	bhi.n	8003b20 <UART_SetConfig+0xe8>
 8003ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8003af0 <UART_SetConfig+0xb8>)
 8003aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aee:	bf00      	nop
 8003af0:	08003b01 	.word	0x08003b01
 8003af4:	08003b11 	.word	0x08003b11
 8003af8:	08003b09 	.word	0x08003b09
 8003afc:	08003b19 	.word	0x08003b19
 8003b00:	2301      	movs	r3, #1
 8003b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b06:	e042      	b.n	8003b8e <UART_SetConfig+0x156>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b0e:	e03e      	b.n	8003b8e <UART_SetConfig+0x156>
 8003b10:	2304      	movs	r3, #4
 8003b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b16:	e03a      	b.n	8003b8e <UART_SetConfig+0x156>
 8003b18:	2308      	movs	r3, #8
 8003b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b1e:	e036      	b.n	8003b8e <UART_SetConfig+0x156>
 8003b20:	2310      	movs	r3, #16
 8003b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b26:	e032      	b.n	8003b8e <UART_SetConfig+0x156>
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a7e      	ldr	r2, [pc, #504]	@ (8003d28 <UART_SetConfig+0x2f0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d12a      	bne.n	8003b88 <UART_SetConfig+0x150>
 8003b32:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003b36:	f7ff ff15 	bl	8003964 <LL_RCC_GetLPUARTClockSource>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b40:	d01a      	beq.n	8003b78 <UART_SetConfig+0x140>
 8003b42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b46:	d81b      	bhi.n	8003b80 <UART_SetConfig+0x148>
 8003b48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b4c:	d00c      	beq.n	8003b68 <UART_SetConfig+0x130>
 8003b4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b52:	d815      	bhi.n	8003b80 <UART_SetConfig+0x148>
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <UART_SetConfig+0x128>
 8003b58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b5c:	d008      	beq.n	8003b70 <UART_SetConfig+0x138>
 8003b5e:	e00f      	b.n	8003b80 <UART_SetConfig+0x148>
 8003b60:	2300      	movs	r3, #0
 8003b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b66:	e012      	b.n	8003b8e <UART_SetConfig+0x156>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b6e:	e00e      	b.n	8003b8e <UART_SetConfig+0x156>
 8003b70:	2304      	movs	r3, #4
 8003b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b76:	e00a      	b.n	8003b8e <UART_SetConfig+0x156>
 8003b78:	2308      	movs	r3, #8
 8003b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b7e:	e006      	b.n	8003b8e <UART_SetConfig+0x156>
 8003b80:	2310      	movs	r3, #16
 8003b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b86:	e002      	b.n	8003b8e <UART_SetConfig+0x156>
 8003b88:	2310      	movs	r3, #16
 8003b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a65      	ldr	r2, [pc, #404]	@ (8003d28 <UART_SetConfig+0x2f0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	f040 8097 	bne.w	8003cc8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d823      	bhi.n	8003bea <UART_SetConfig+0x1b2>
 8003ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba8 <UART_SetConfig+0x170>)
 8003ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba8:	08003bcd 	.word	0x08003bcd
 8003bac:	08003beb 	.word	0x08003beb
 8003bb0:	08003bd5 	.word	0x08003bd5
 8003bb4:	08003beb 	.word	0x08003beb
 8003bb8:	08003bdb 	.word	0x08003bdb
 8003bbc:	08003beb 	.word	0x08003beb
 8003bc0:	08003beb 	.word	0x08003beb
 8003bc4:	08003beb 	.word	0x08003beb
 8003bc8:	08003be3 	.word	0x08003be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bcc:	f7ff f9b6 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 8003bd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bd2:	e010      	b.n	8003bf6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bd4:	4b56      	ldr	r3, [pc, #344]	@ (8003d30 <UART_SetConfig+0x2f8>)
 8003bd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bd8:	e00d      	b.n	8003bf6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bda:	f7ff f92f 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8003bde:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003be0:	e009      	b.n	8003bf6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003be2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003be8:	e005      	b.n	8003bf6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003bf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 812b 	beq.w	8003e54 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	4a4c      	ldr	r2, [pc, #304]	@ (8003d34 <UART_SetConfig+0x2fc>)
 8003c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	4413      	add	r3, r2
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d305      	bcc.n	8003c2e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d903      	bls.n	8003c36 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003c34:	e10e      	b.n	8003e54 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	2200      	movs	r2, #0
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	60fa      	str	r2, [r7, #12]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c42:	4a3c      	ldr	r2, [pc, #240]	@ (8003d34 <UART_SetConfig+0x2fc>)
 8003c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c58:	f7fc fa90 	bl	800017c <__aeabi_uldivmod>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	020b      	lsls	r3, r1, #8
 8003c6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c72:	0202      	lsls	r2, r0, #8
 8003c74:	6979      	ldr	r1, [r7, #20]
 8003c76:	6849      	ldr	r1, [r1, #4]
 8003c78:	0849      	lsrs	r1, r1, #1
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	4605      	mov	r5, r0
 8003c80:	eb12 0804 	adds.w	r8, r2, r4
 8003c84:	eb43 0905 	adc.w	r9, r3, r5
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	469a      	mov	sl, r3
 8003c90:	4693      	mov	fp, r2
 8003c92:	4652      	mov	r2, sl
 8003c94:	465b      	mov	r3, fp
 8003c96:	4640      	mov	r0, r8
 8003c98:	4649      	mov	r1, r9
 8003c9a:	f7fc fa6f 	bl	800017c <__aeabi_uldivmod>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cac:	d308      	bcc.n	8003cc0 <UART_SetConfig+0x288>
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cb4:	d204      	bcs.n	8003cc0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a3a      	ldr	r2, [r7, #32]
 8003cbc:	60da      	str	r2, [r3, #12]
 8003cbe:	e0c9      	b.n	8003e54 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003cc6:	e0c5      	b.n	8003e54 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cd0:	d16d      	bne.n	8003dae <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003cd2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	2b07      	cmp	r3, #7
 8003cda:	d82d      	bhi.n	8003d38 <UART_SetConfig+0x300>
 8003cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce4 <UART_SetConfig+0x2ac>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003d05 	.word	0x08003d05
 8003ce8:	08003d0d 	.word	0x08003d0d
 8003cec:	08003d39 	.word	0x08003d39
 8003cf0:	08003d13 	.word	0x08003d13
 8003cf4:	08003d39 	.word	0x08003d39
 8003cf8:	08003d39 	.word	0x08003d39
 8003cfc:	08003d39 	.word	0x08003d39
 8003d00:	08003d1b 	.word	0x08003d1b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d04:	f7ff f930 	bl	8002f68 <HAL_RCC_GetPCLK2Freq>
 8003d08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d0a:	e01b      	b.n	8003d44 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d0c:	4b08      	ldr	r3, [pc, #32]	@ (8003d30 <UART_SetConfig+0x2f8>)
 8003d0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d10:	e018      	b.n	8003d44 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d12:	f7ff f893 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8003d16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d18:	e014      	b.n	8003d44 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d20:	e010      	b.n	8003d44 <UART_SetConfig+0x30c>
 8003d22:	bf00      	nop
 8003d24:	cfff69f3 	.word	0xcfff69f3
 8003d28:	40008000 	.word	0x40008000
 8003d2c:	40013800 	.word	0x40013800
 8003d30:	00f42400 	.word	0x00f42400
 8003d34:	08004418 	.word	0x08004418
      default:
        pclk = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003d42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8084 	beq.w	8003e54 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	4a4b      	ldr	r2, [pc, #300]	@ (8003e80 <UART_SetConfig+0x448>)
 8003d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d56:	461a      	mov	r2, r3
 8003d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d5e:	005a      	lsls	r2, r3, #1
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	441a      	add	r2, r3
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	2b0f      	cmp	r3, #15
 8003d76:	d916      	bls.n	8003da6 <UART_SetConfig+0x36e>
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d7e:	d212      	bcs.n	8003da6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	f023 030f 	bic.w	r3, r3, #15
 8003d88:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	085b      	lsrs	r3, r3, #1
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	8bfb      	ldrh	r3, [r7, #30]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	8bfa      	ldrh	r2, [r7, #30]
 8003da2:	60da      	str	r2, [r3, #12]
 8003da4:	e056      	b.n	8003e54 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003dac:	e052      	b.n	8003e54 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003db2:	3b01      	subs	r3, #1
 8003db4:	2b07      	cmp	r3, #7
 8003db6:	d822      	bhi.n	8003dfe <UART_SetConfig+0x3c6>
 8003db8:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc0 <UART_SetConfig+0x388>)
 8003dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbe:	bf00      	nop
 8003dc0:	08003de1 	.word	0x08003de1
 8003dc4:	08003de9 	.word	0x08003de9
 8003dc8:	08003dff 	.word	0x08003dff
 8003dcc:	08003def 	.word	0x08003def
 8003dd0:	08003dff 	.word	0x08003dff
 8003dd4:	08003dff 	.word	0x08003dff
 8003dd8:	08003dff 	.word	0x08003dff
 8003ddc:	08003df7 	.word	0x08003df7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003de0:	f7ff f8c2 	bl	8002f68 <HAL_RCC_GetPCLK2Freq>
 8003de4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003de6:	e010      	b.n	8003e0a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de8:	4b26      	ldr	r3, [pc, #152]	@ (8003e84 <UART_SetConfig+0x44c>)
 8003dea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003dec:	e00d      	b.n	8003e0a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dee:	f7ff f825 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8003df2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003df4:	e009      	b.n	8003e0a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003dfc:	e005      	b.n	8003e0a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e08:	bf00      	nop
    }

    if (pclk != 0U)
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d021      	beq.n	8003e54 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	4a1a      	ldr	r2, [pc, #104]	@ (8003e80 <UART_SetConfig+0x448>)
 8003e16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	085b      	lsrs	r3, r3, #1
 8003e28:	441a      	add	r2, r3
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	2b0f      	cmp	r3, #15
 8003e38:	d909      	bls.n	8003e4e <UART_SetConfig+0x416>
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e40:	d205      	bcs.n	8003e4e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60da      	str	r2, [r3, #12]
 8003e4c:	e002      	b.n	8003e54 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2200      	movs	r2, #0
 8003e68:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003e70:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3730      	adds	r7, #48	@ 0x30
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e7e:	bf00      	nop
 8003e80:	08004418 	.word	0x08004418
 8003e84:	00f42400 	.word	0x00f42400

08003e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01a      	beq.n	8003f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f86:	d10a      	bne.n	8003f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b098      	sub	sp, #96	@ 0x60
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fdc:	f7fc ff34 	bl	8000e48 <HAL_GetTick>
 8003fe0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d12f      	bne.n	8004050 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ff0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f88e 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d022      	beq.n	8004050 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800401a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800401e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004028:	647b      	str	r3, [r7, #68]	@ 0x44
 800402a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800402e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e6      	bne.n	800400a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e063      	b.n	8004118 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b04      	cmp	r3, #4
 800405c:	d149      	bne.n	80040f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800405e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004066:	2200      	movs	r2, #0
 8004068:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f857 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d03c      	beq.n	80040f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	e853 3f00 	ldrex	r3, [r3]
 8004084:	623b      	str	r3, [r7, #32]
   return(result);
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800408c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004096:	633b      	str	r3, [r7, #48]	@ 0x30
 8004098:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800409c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800409e:	e841 2300 	strex	r3, r2, [r1]
 80040a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1e6      	bne.n	8004078 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3308      	adds	r3, #8
 80040b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3308      	adds	r3, #8
 80040c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040ca:	61fa      	str	r2, [r7, #28]
 80040cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	69b9      	ldr	r1, [r7, #24]
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	617b      	str	r3, [r7, #20]
   return(result);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e5      	bne.n	80040aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e012      	b.n	8004118 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3758      	adds	r7, #88	@ 0x58
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	4613      	mov	r3, r2
 800412e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004130:	e04f      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d04b      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413a:	f7fc fe85 	bl	8000e48 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	429a      	cmp	r2, r3
 8004148:	d302      	bcc.n	8004150 <UART_WaitOnFlagUntilTimeout+0x30>
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e04e      	b.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d037      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b80      	cmp	r3, #128	@ 0x80
 8004166:	d034      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b40      	cmp	r3, #64	@ 0x40
 800416c:	d031      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b08      	cmp	r3, #8
 800417a:	d110      	bne.n	800419e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2208      	movs	r2, #8
 8004182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f838 	bl	80041fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2208      	movs	r2, #8
 800418e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e029      	b.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041ac:	d111      	bne.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f81e 	bl	80041fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e00f      	b.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4013      	ands	r3, r2
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	429a      	cmp	r2, r3
 80041e0:	bf0c      	ite	eq
 80041e2:	2301      	moveq	r3, #1
 80041e4:	2300      	movne	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d0a0      	beq.n	8004132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b095      	sub	sp, #84	@ 0x54
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004212:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004220:	643b      	str	r3, [r7, #64]	@ 0x40
 8004222:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004226:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800422e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e6      	bne.n	8004202 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3308      	adds	r3, #8
 800423a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	61fb      	str	r3, [r7, #28]
   return(result);
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3308      	adds	r3, #8
 8004256:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004258:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800425a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800425e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004260:	e841 2300 	strex	r3, r2, [r1]
 8004264:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e3      	bne.n	8004234 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004270:	2b01      	cmp	r3, #1
 8004272:	d118      	bne.n	80042a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	60bb      	str	r3, [r7, #8]
   return(result);
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f023 0310 	bic.w	r3, r3, #16
 8004288:	647b      	str	r3, [r7, #68]	@ 0x44
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004292:	61bb      	str	r3, [r7, #24]
 8004294:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6979      	ldr	r1, [r7, #20]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	613b      	str	r3, [r7, #16]
   return(result);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e6      	bne.n	8004274 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80042ba:	bf00      	nop
 80042bc:	3754      	adds	r7, #84	@ 0x54
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <memset>:
 80042c6:	4402      	add	r2, r0
 80042c8:	4603      	mov	r3, r0
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d100      	bne.n	80042d0 <memset+0xa>
 80042ce:	4770      	bx	lr
 80042d0:	f803 1b01 	strb.w	r1, [r3], #1
 80042d4:	e7f9      	b.n	80042ca <memset+0x4>
	...

080042d8 <__libc_init_array>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	4d0d      	ldr	r5, [pc, #52]	@ (8004310 <__libc_init_array+0x38>)
 80042dc:	4c0d      	ldr	r4, [pc, #52]	@ (8004314 <__libc_init_array+0x3c>)
 80042de:	1b64      	subs	r4, r4, r5
 80042e0:	10a4      	asrs	r4, r4, #2
 80042e2:	2600      	movs	r6, #0
 80042e4:	42a6      	cmp	r6, r4
 80042e6:	d109      	bne.n	80042fc <__libc_init_array+0x24>
 80042e8:	4d0b      	ldr	r5, [pc, #44]	@ (8004318 <__libc_init_array+0x40>)
 80042ea:	4c0c      	ldr	r4, [pc, #48]	@ (800431c <__libc_init_array+0x44>)
 80042ec:	f000 f818 	bl	8004320 <_init>
 80042f0:	1b64      	subs	r4, r4, r5
 80042f2:	10a4      	asrs	r4, r4, #2
 80042f4:	2600      	movs	r6, #0
 80042f6:	42a6      	cmp	r6, r4
 80042f8:	d105      	bne.n	8004306 <__libc_init_array+0x2e>
 80042fa:	bd70      	pop	{r4, r5, r6, pc}
 80042fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004300:	4798      	blx	r3
 8004302:	3601      	adds	r6, #1
 8004304:	e7ee      	b.n	80042e4 <__libc_init_array+0xc>
 8004306:	f855 3b04 	ldr.w	r3, [r5], #4
 800430a:	4798      	blx	r3
 800430c:	3601      	adds	r6, #1
 800430e:	e7f2      	b.n	80042f6 <__libc_init_array+0x1e>
 8004310:	08004438 	.word	0x08004438
 8004314:	08004438 	.word	0x08004438
 8004318:	08004438 	.word	0x08004438
 800431c:	0800443c 	.word	0x0800443c

08004320 <_init>:
 8004320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004322:	bf00      	nop
 8004324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004326:	bc08      	pop	{r3}
 8004328:	469e      	mov	lr, r3
 800432a:	4770      	bx	lr

0800432c <_fini>:
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432e:	bf00      	nop
 8004330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004332:	bc08      	pop	{r3}
 8004334:	469e      	mov	lr, r3
 8004336:	4770      	bx	lr
